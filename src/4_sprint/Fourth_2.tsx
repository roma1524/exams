// import React from 'react';
// import './index.css';
// import {App} from './App';
// // import * as serviceWorker from './serviceWorker';
// import {createRoot} from 'react-dom/client';
//
// const container  = document.getElementById('root') as HTMLElement
// const root = createRoot(container);
// root.render(<App />);


/*
import { configureStore, createSlice } from "@reduxjs/toolkit"
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"

// slice
const slice = createSlice({
    name: "tickets",
    initialState: [
        { id: 1, event: "Concert", available: true, price: 100 },
        { id: 2, event: "Movie", available: false, price: 50 },
        { id: 3, event: "Theater", available: true, price: 75 },
    ],
    reducers: {
        applyDiscount: (state, action) => {
            state.initialState.forEach(item => item.price)
            return
        },
    },
    selectors: {
        selectTickets: (state) => state,
    },
})

const { applyDiscount } = slice.actions
const { selectTickets } = slice.selectors

// App.tsx
const App = () => {
    const tickets = useAppSelector(selectTickets)
    const dispatch = useAppDispatch()

    const handleDiscount = (discount: number) => {
        dispatch(applyDiscount(discount))
    }

    return (
        <div>
            <button onClick={() => handleDiscount(20)}>20% Discount</button>
            <button onClick={() => handleDiscount(50)}>50% Discount</button>
            <button onClick={() => handleDiscount(80)}>80% Discount</button>
            <ul>
                {tickets.map((ticket) => (
                    <li key={ticket.id}>
            <span>
              {ticket.event} ({ticket.available ? "Available" : "Sold Out"}) - ${ticket.price.toFixed(2)}
            </span>
                    </li>
                ))}
            </ul>
        </div>
    )
}

// store.ts
const store = configureStore({
    reducer: {
        tickets: slice.reducer,
    },
})

type RootState = ReturnType<typeof store.getState>
type AppDispatch = typeof store.dispatch
const useAppDispatch = useDispatch.withTypes<AppDispatch>()
const useAppSelector = useSelector.withTypes<RootState>()

// main.ts
createRoot(document.getElementById("root")!).render(
    <Provider store={store}>
        <App />
    </Provider>,
)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å 20%, 50% –∏–ª–∏ 80% —Å–∫–∏–¥–∫–∞–º–∏ —Ü–µ–Ω—ã –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –Ω–∞
// —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–µ–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –±–∏–ª–µ—Ç–∞ —É–º–µ–Ω—å—à–∞–ª–∞—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–º–µ—Å—Ç–æ return state.
// ‚ùó–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
// ‚ùó–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é action.payload (const {id} = action.payload)
// ‚ùó–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ action.payload (const id = action.payload.id)*/

/*
import { configureStore, createSlice } from "@reduxjs/toolkit"
import { createRoot } from "react-dom/client"
import { Provider, useSelector } from "react-redux"

// slice
const slice = createSlice({
    name: "taskManager",
    initialState: {
        tasks: [
            { id: 1, title: "Task 1" },
            { id: 2, title: "Task 2" },
            { id: 3, title: "Task 3" },
        ],
    },
    reducers: {},
    selectors: {
        selectTasks: (state) => state.tasks,
    },
})

const { selectTasks } = slice.selectors

// App.tsx
const App = () => {
    const tasks = useAppSelector(selectTasks)

    return (
        <>
            <ul>
                {tasks.map((task) => (
                    <li key={task.id}>{task.title}</li>
                ))}
            </ul>
        </>
    )
}

// store.ts
const store = configureStore({
    reducer: {
        taskManager: slice.reducer,
    },
})

type RootState = ReturnType<typeof store.getState>
const useAppSelector = useSelector.withTypes<RootState>()

// main.ts
createRoot(document.getElementById("root")!).render(
    <Provider store={store}>
        <App />
    </Provider>,
)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ—Ä–∞–±–æ—á–∏–π –∫–æ–¥ –∏ –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –º–∞—Å—Å–∏–≤ —Ç–∞—Å–æ–∫

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ // ‚ùó‚ùó‚ùóXXX ‚ùó‚ùó‚ùó, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –º–∞—Å—Å–∏–≤ —Ç–∞—Å–æ–∫*/
/*
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"
import axios from "axios"
import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"

// Types
type Photo = {
    albumId: string
    id: string
    title: string
    url: string
}

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })

const photosAPI = {
    getPhotos() {
        return instance.get<Photo[]>("photos?delay=2")
    },
}

// Slice
const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })

const slice = createAppSlice({
    name: "photo",
    initialState: {
        photos: [] as Photo[],
        isLoading: false,
    },
    selectors: {
        selectPhotos: (state) => state.photos,
        selectIsLoading: (state) => state.isLoading,
    },
    reducers: (create) => ({
        setLoading: create.reducer<{ isLoading: boolean }>((state, action) => {
            state.isLoading = action.payload.isLoading
        }),
        fetchPhotos: create.asyncThunk(
            async (_arg, { dispatch, rejectWithValue }) => {
                try {
                    dispatch(setLoading({ isLoading: true }))
                    const res = await photosAPI.getPhotos()
                    dispatch(setLoading({ isLoading: false }))
                    return { photos: res.data }
                } catch (error) {
                    return rejectWithValue(null)
                }
            },
            {
                fulfilled: (state, action) => {
                    state.photos = action.payload.photos
                },
            },
        ),
    }),
})

const photoReducer = slice.reducer
const { fetchPhotos, setLoading } = slice.actions
const { selectPhotos, selectIsLoading } = slice.selectors

// Loader
const Loader = () => {
    return <h1>üîò Loading ...</h1>
}

// App
const App = () => {
    const dispatch = useAppDispatch()
    const photos = useAppSelector(selectPhotos)
    const isLoading = useAppSelector(selectIsLoading)

    const getPhotosHandler = () => {
        dispatch(fetchPhotos())
    }

    return (
        <>
            <h1>üì∏ –§–æ—Ç–æ</h1>
            <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
            {isLoading && <Loader />}
            <div style={{ display: "flex", gap: "20px", margin: "20px" }}>
                {photos.map((photo) => {
                    return (
                        <div key={photo.id}>
                            <b>title</b>: {photo.title}
                            <div>
                                <img src={photo.url} alt="" />
                            </div>
                        </div>
                    )
                })}
            </div>
        </>
    )
}

// Store
const store = configureStore({
    reducer: {
        [slice.name]: photoReducer,
    },
})

type RootState = ReturnType<typeof store.getState>
type AppDispatch = typeof store.dispatch
const useAppDispatch = useDispatch.withTypes<AppDispatch>()
const useAppSelector = useSelector.withTypes<RootState>()

createRoot(document.getElementById("root")!).render(
    <Provider store={store}>
        <App />
    </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å Loading...,
// –∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
// –ù–æ –ø–æ—Å–ª–µ –ø–æ–¥–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö Loader –Ω–µ —É–±–∏—Ä–∞–µ—Ç—Å—è.
// –ö–∞–∫–æ–π –∫–æ–¥ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã Loader –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.

/*
import { useEffect } from "react"
import { Provider, useDispatch, useSelector } from "react-redux"
import axios from "axios"
import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
import { createRoot } from "react-dom/client"

// Types
type Todolist = {
    id: string
    title: string
    order: number
    createdAt: string
    updatedAt: string
    completed: boolean
}

type User = {
    id: string
    name: string
    age: number
}

type UsersResponse = {
    items: User[]
    totalCount: number
}

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })

const api = {
    getTodos() {
        return instance.get<Todolist[]>("todos")
    },
    getUsers() {
        return instance.get<UsersResponse>("users")
    },
}

// Slice
const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })

const slice = createAppSlice({
    name: "app",
    initialState: {
        todolists: [] as Todolist[],
        users: [] as User[],
        error: null as string | null,
    },
    selectors: {
        selectTodolists: (state) => state.todolists,
        selectUsers: (state) => state.users,
        selectError: (state) => state.error,
    },
    reducers: (create) => ({
        setError: create.reducer<{ error: string | null }>((state, action) => {
            state.error = action.payload.error
        }),
        fetchTodolists: create.asyncThunk(
            async (_arg, { rejectWithValue }) => {
                try {
                   const todolists = await api.getTodos()
                    return todolists;
                } catch (error) {
                    return rejectWithValue(null)
                }
            },
            {
                fulfilled: (state, action) => {
                    state.todolists = action.payload.todolists
                },
            },
        ),
        fetchUsers: create.asyncThunk(
            async (_arg, { rejectWithValue }) => {
                try {
                    const users = await api.getUsers()
                    return users;
                } catch (error) {
                    return rejectWithValue(null)
                }
            },
            {
                fulfilled: (state, action) => {
                    state.users = action.payload.users
                },
            },
        ),
    }),
})

const appReducer = slice.reducer
const { fetchTodolists, fetchUsers } = slice.actions
const { selectTodolists, selectUsers, selectError } = slice.selectors

// App
const App = () => {
    return (
        <>
            <h1>‚úÖTodos & üôÇUsers</h1>
            <div style={{ display: "flex", justifyContent: "space-evenly" }}>
                <Todos />
                <Users />
            </div>
        </>
    )
}

const Todos = () => {
    const dispatch = useAppDispatch()
    const todolists = useAppSelector(selectTodolists)
    const error = useAppSelector(selectError)

    useEffect(() => {
        dispatch(fetchTodolists())
    }, [])

    return (
        <div>
            <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
            {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
            {todolists.map((todolist) => (
                <div style={todolist.completed ? { color: "grey" } : {}} key={todolist.id}>
                    <input type="checkbox" checked={todolist.completed} />
                    <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todolist.title}
                </div>
            ))}
        </div>
    )
}

const Users = () => {
    const dispatch = useAppDispatch()
    const users = useAppSelector(selectUsers)
    const error = useAppSelector(selectError)

    useEffect(() => {
        dispatch(fetchUsers())
    }, [])

    return (
        <div>
            <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
            {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
            <div>
                {users.map((user) => {
                    return (
                        <div key={user.id}>
                            <b>name</b>:{user.name} - <b>age</b>:{user.age}
                        </div>
                    )
                })}
            </div>
        </div>
    )
}

// Store
const store = configureStore({
    reducer: {
        [slice.name]: appReducer,
    },
})

type RootState = ReturnType<typeof store.getState>
type AppDispatch = typeof store.dispatch
const useAppDispatch = useDispatch.withTypes<AppDispatch>()
const useAppSelector = useSelector.withTypes<RootState>()

createRoot(document.getElementById("root")!).render(
    <Provider store={store}>
        <App />
    </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ // ‚ùóAAA, ‚ùóBBB, ‚ùóCCC, ‚ùóDDD –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
// –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤ –∏ —é–∑–µ—Ä–æ–≤
// –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å–æ–±–ª—é–¥–∞—è –ø–æ—Ä—è–¥–æ–∫

// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
// const a = 1 + 1
// return a
// const c = 1 + 3
// return c

/*
const res = await api.getTodos()
return { todolists: res.data }
const res = await api.getUsers()
return { users: res.data.items }*/

/*

import { configureStore, createSlice } from "@reduxjs/toolkit"
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"

// waterCounter slice
const waterSlice = createSlice({
    name: "waterCounter",
    initialState: {
        liters: 10,
    },
    reducers: {
        increase: (state) => {
            state.liters += 1
        },
    },
    selectors: {
        selectLiters: (state) => state.liters,
    },
})

const { increase } = waterSlice.actions
const { selectLiters } = waterSlice.selectors

// energy slice
const energySlice = createSlice({
    name: "energyCounter",
    initialState: {
        joules: 5000,
    },
    reducers: {
        decrease: (state) => {
            state.joules -= 100
        },
    },
    extraReducers: (builder) => {
        builder.addCase(waterSlice.actions.increase, (state) => {
            state.joules += 200;
        });
    },
    selectors: {
        selectJoules: (state) => state.joules,
    },
})

const { decrease } = energySlice.actions
const { selectJoules } = energySlice.selectors

// App.tsx
const App = () => {
    const water = useAppSelector(selectLiters)
    const energy = useAppSelector(selectJoules)
    const dispatch = useAppDispatch()

    return (
        <>
            <button onClick={() => dispatch(increase())}>Add Water</button>
            <span>Water: {water} liters</span>

            <button onClick={() => dispatch(decrease())}>Use Energy</button>
            <span>Energy: {energy} joules</span>
        </>
    )
}

// store.ts
const store = configureStore({
    reducer: {
        waterCounter: waterSlice.reducer,
        energyCounter: energySlice.reducer,
    },
})

type RootState = ReturnType<typeof store.getState>
type AppDispatch = typeof store.dispatch
const useAppDispatch = useDispatch.withTypes<AppDispatch>()
const useAppSelector = useSelector.withTypes<RootState>()

// main.ts
createRoot(document.getElementById("root")!).render(
    <Provider store={store}>
        <App />
    </Provider>,
)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –£ –≤–∞—Å –µ—Å—Ç—å –¥–≤–∞ —Å—á–µ—Ç—á–∏–∫–∞: –¥–ª—è –≤–æ–¥—ã (–ª–∏—Ç—Ä—ã) –∏ —ç–Ω–µ—Ä–≥–∏–∏ (–¥–∂–æ—É–ª–∏).
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **Add Water** —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã.
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **Use Energy** —ç–Ω–µ—Ä–≥–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 100 –¥–∂–æ—É–ª–µ–π.

// ü™õ –ó–∞–¥–∞—á–∞:
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **Add Water** –ø–æ–º–∏–º–æ —É–≤–µ–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã
// —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ 200 –¥–∂–æ—É–ª–µ–π.

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
// üí°–ü–æ–¥—Å–∫–∞–∑–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ extraReducers

extraReducers: (builder) => {
    builder.addCase(waterSlice.actions.increase, (state) => {
        state.joules += 200;
    });
}*/


/*import { configureStore, createSlice } from "@reduxjs/toolkit"
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"

type Note = {
    id: number
    content: string
    important: boolean
}

// slice
const slice = createSlice({
    name: "notes",
    initialState: {
        items: [
            { id: 1, content: "Buy groceries", important: false },
            { id: 2, content: "Schedule meeting", important: true },
            { id: 3, content: "Call mom", important: false },
        ],
    },
    reducers: {
        updateNote: (state, action) => {
            const findEl = state.items.find(elem => elem.id === action.payload.id)
            if (findEl) {
                findEl.important = action.payload.important
            }
        },
    },
    selectors: {
        selectNotes: (state) => state.items,
    },
})

const { updateNote } = slice.actions
const { selectNotes } = slice.selectors

// App.tsx
const App = () => {
    const notes = useAppSelector(selectNotes)
    const dispatch = useAppDispatch()

    const toggleImportance = (note: Note) => {
        dispatch(updateNote({ id: note.id, important: !note.important }))
    }

    return (
        <ul>
            {notes.map((note) => (
                <li key={note.id}>
          <span
              style={{
                  fontWeight: note.important ? "bold" : "normal",
              }}
          >
            {note.content}
          </span>
                    <button onClick={() => toggleImportance(note)}>{note.important ? "Unmark" : "Mark Important"}</button>
                </li>
            ))}
        </ul>
    )
}

// store.ts
const store = configureStore({
    reducer: {
        notes: slice.reducer,
    },
})

type RootState = ReturnType<typeof store.getState>
type AppDispatch = typeof store.dispatch
const useAppDispatch = useDispatch.withTypes<AppDispatch>()
const useAppSelector = useSelector.withTypes<RootState>()

// main.ts
createRoot(document.getElementById("root")!).render(
    <Provider store={store}>
        <App />
    </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Mark Important –∏–ª–∏ Unmark —Ä—è–¥–æ–º —Å –∑–∞–º–µ—Ç–∫–æ–π, –≤–∞–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è ü•≤

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Mark Important –∏–ª–∏ Unmark,
// —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–º–µ—Å—Ç–æ return state.
// ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
// ‚ùó–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é action.payload (const {id} = action.payload)
// ‚ùó–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ action.payload (const id = action.payload.id)



// –£ –≤–∞—Å –µ—Å—Ç—å —Ç–∏–ø UserProfile, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
/*
type UserProfile = {
    id: number
    name: string
    age: number
}

type UpdateProfile = Partial<UserProfile>

const currentProfile: UserProfile = {
    id: 1,
    name: "John Doe",
    age: 30,
}

const updates1 = {
    name: "John Smith",
    age: 31,
}

const updates2 = {
    id: 2,
    name: "David Logger",
}

console.log(updateProfile(currentProfile, updates1)) // { id: 1, name: 'John Smith', age: 31 }
console.log(updateProfile(currentProfile, updates2)) // { id: 2, name: 'David Logger', age: 30 }

function updateProfile(currentProfile: UserProfile, updates: Partial<UserProfile>): UserProfile {
    return {
        ...currentProfile,
        ...updates,
    };
}*/

// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é updateProfile,
// –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (currentProfile)
// –∏ –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (updates)
// –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ—Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
// ‚ùó–û–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±–æ–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –∏–∑
// UserProfile, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ.
// ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –≤—Å—é —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º


/*import { useEffect } from "react"
import { createRoot } from "react-dom/client"
import { Provider, useDispatch, useSelector } from "react-redux"
import axios from "axios"
import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"

// Types
type Post = {
    id: string
    body: string
    title: string
    userId: string
}

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })

const postsAPI = {
    getPosts() {
        return instance.get<Post[]>("posts")
    },
}

// Slice
const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })

const slice = createAppSlice({
    name: "posts",
    initialState: {
        posts: [] as Post[],
    },
    selectors: {
        selectPosts: (state) => state.posts,
    },
    reducers: (create) => ({
        fetchPosts: create.asyncThunk(
            async (_arg, { rejectWithValue }) => {
                try {
                    const res = await postsAPI.getPosts()
                    return { posts: res.data }
                } catch (error) {
                    return rejectWithValue(null)
                }
            },
            {
                fulfilled: (state, action) => {
                    state.posts = action.payload.posts
                },
            },
        ),
    }),
})

const postsReducer = slice.reducer
const { fetchPosts } = slice.actions
const { selectPosts } = slice.selectors

// App
const App = () => {
    const dispatch = useAppDispatch()
    const posts = useAppSelector(selectPosts)

    useEffect(() => {
        dispatch(fetchPosts())
    }, [])

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {posts.length ? (
                posts.map((p) => {
                    return (
                        <div key={p.id}>
                            <b>title</b>: {p.title}
                        </div>
                    )
                })
            ) : (
                <h2>–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
            )}
        </>
    )
}

// Store
const store = configureStore({
    reducer: {
        [slice.name]: postsReducer,
    },
})

type RootState = ReturnType<typeof store.getState>
type AppDispatch = typeof store.dispatch
const useAppDispatch = useDispatch.withTypes<AppDispatch>()
const useAppSelector = useSelector.withTypes<RootState>()

createRoot(document.getElementById("root")!).render(
    <Provider store={store}>
        <App />
    </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.

// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// P.S. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã —Ç–∞–∫ —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –¥–µ–ª–æ.