import { ChangeEvent, FormEvent, useState } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
//
// // Types
// type LoginFields = {
//   email: string
//   password: string
// }
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   login(data: LoginFields) {
//     return instance.post<{ token: string }>("auth/login", data)
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "app",
//   initialState: {
//     error: null as string | null,
//     isLoggedIn: false,
//   },
//   selectors: {
//     selectError: (state) => state.error,
//   },
//   reducers: (create) => ({
//     setError: create.reducer<{ error: string | null }>((state, action) => {
//       state.error = action.payload.error
//     }),
//     login: create.asyncThunk(
//       async (data: LoginFields, thunkAPI) => {
//         try {
//           await api.login(data)
//           return { isLoggedIn: true }
//         } catch (error: any) {
//
//           return thunkAPI.rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.isLoggedIn = action.payload.isLoggedIn
//         },
//       },
//     ),
//   }),
// })
//
// const appReducer = slice.reducer
// const { login, setError } = slice.actions
// const { selectError } = slice.selectors
//
// // Login
// const Login = () => {
//   const dispatch = useAppDispatch()
//
//   const [data, setData] = useState<LoginFields>({ email: "", password: "" })
//
//   const error = useAppSelector(selectError)
//
//   const changeFormValuesHandler = (e: ChangeEvent<HTMLInputElement>) => {
//     setData((prev) => ({
//       ...prev,
//       [e.target.name]: e.target.value,
//     }))
//   }
//
//   const submitForm = (e: FormEvent<HTMLFormElement>) => {
//     e.preventDefault()
//     dispatch(login(data))
//   }
//
//   return (
//     <>
//       {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//       <form onSubmit={submitForm}>
//         <input name="email" placeholder={"–í–≤–µ–¥–∏—Ç–µ email"} value={data.email} onChange={changeFormValuesHandler} />
//         <input
//           name="password"
//           type={"password"}
//           placeholder={"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"}
//           value={data.password}
//           onChange={changeFormValuesHandler}
//         />
//         <button type="submit">–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
//       </form>
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: appReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <Login />
//   </Provider>,
// )
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
// // –£ –≤–∞—Å —ç—Ç–æ –Ω–∞–≤—Ä—è–¥ –ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è üòà, —Ç.–∫. –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.
// // –û—Ç–∫—Ä–æ–π—Ç–µ Network –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.
// // –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùóXXX` —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≥–æ–≤–æ—Ä—è—â–∞—è –æ —Ç–æ–º,
// // —á—Ç–æ email –∏–ª–∏ password –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
// // ‚ùó –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å error –Ω–µ –Ω–∞–¥–æ
// // ‚ùó –û—à–∏–±–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ("Some error occurred") –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
//
//
//
//
//
// import { useEffect } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
//
// // Types
// type Post = {
//   id: string
//   body: string
//   title: string
//   userId: string
// }
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/ " })
//
// const postsAPI = {
//   getPosts() {
//     return instance.get<Post[]>("posts")
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "posts",
//   initialState: {
//     posts: [] as Post[],
//     error: null as string | null,
//   },
//   selectors: {
//     selectPosts: (state) => state.posts,
//     selectError: (state) => state.error,
//   },
//   reducers: (create) => ({
//     setError: create.reducer<{ error: string | null }>((state, action) => {
//       state.error = action.payload.error
//     }),
//     fetchPosts: create.asyncThunk<{ posts: Post[] }, void, { rejectValue: string }>(
//       async (_arg, { rejectWithValue }) => {
//         try {
//           const res = await postsAPI.getPosts()
//           return { posts: res.data }
//         } catch (error) {
//           let errorMessage = "Some error occurred"
//           if (axios.isAxiosError(error)) {
//             errorMessage = error.message || errorMessage
//           } else if (error instanceof Error) {
//             errorMessage = `Native error: ${error.message}`
//           } else {
//             errorMessage = JSON.stringify(error)
//           }
//           return rejectWithValue(errorMessage)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.posts = action.payload.posts
//         },
//         rejected: (state, action) => {
//           state.error = action.payload || "Some error occurred"
//         }
//       },
//     ),
//   }),
// })
//
// const postsReducer = slice.reducer
// const { fetchPosts } = slice.actions
// const { selectPosts, selectError } = slice.selectors
//
// // App
// const App = () => {
//   const dispatch = useAppDispatch()
//
//   const posts = useAppSelector(selectPosts)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchPosts())
//   }, [])
//
//   return (
//     <>
//       <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//       {posts.map((post) => (
//         <div key={post.id}>
//           <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {post.body}
//         </div>
//       ))}
//       <h2 style={{ color: "red" }}>{!!error && error}</h2>
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: postsReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // ‚ùå –ü–æ—Å—Ç—ã –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.
// // ‚ùó–ß–∏–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è, –≤ –æ—Ç–≤–µ—Ç–µ —ç—Ç–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è).
// // –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùóXXX` —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞: Request failed with status code 404.
// // –ê –µ—Å–ª–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è undefined, —Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—à–∏–±–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "Some error occurred"
// // ‚ùó–í—ã–Ω–æ—Å–∏—Ç—å "Some error occurred" –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–µ –Ω—É–∂–Ω–æ
// // ‚ùó–û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –≤ —ç–∫–∑–∞–º–µ–Ω–µ —ç—Ç–æ —É—á—Ç–µ–Ω–æ
//
//
//
//
//
//
// import { useEffect } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
//
// // Types
// type Comment = {
//   postId: string
//   id: string
//   name: string
//   email: string
//   body: string
// }
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const commentsAPI = {
//   getComments() {
//     return instance.get<Comment[]>("comments")
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "comments",
//   initialState: {
//     comments: [] as Comment[],
//     error: null as string | null,
//   },
//   selectors: {
//     selectComments: (state) => state.comments,
//     selectError: (state) => state.error,
//   },
//   reducers: (create) => ({
//     fetchPhotos: create.asyncThunk(
//       async (_arg, { rejectWithValue }) => {
//         try {
//           const res = await commentsAPI.getComments()
//           console.log('res')
//           return { comments: res.data }
//         } catch (error) {
//           return rejectWithValue(error)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.comments = action.payload.comments
//           state.error = null
//         },
//         rejected: (state) => {
//           state.error = "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ù–∞–π–¥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å –µ–µ"
//         },
//       },
//     ),
//   }),
// })
//
// const commentsReducer = slice.reducer
// const { fetchPhotos } = slice.actions
// const { selectComments, selectError } = slice.selectors
//
// // App
// export const App = () => {
//   const dispatch = useAppDispatch()
//
//   const comments = useAppSelector(selectComments)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchPhotos())
//   }, [])
//
//   return (
//     <>
//       <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//       <h2>{!!error && error}</h2>
//       {comments.map((c) => {
//         return (
//           <div key={c.id}>
//             <b>Comment</b>: {c.body}{" "}
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: commentsReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // ‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.
// // –í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –∏ –ø–æ—á–∏–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
// // –ï—Å–ª–∏ —Å–¥–µ–ª–∞–µ—Ç–µ –≤—Å–µ –≤–µ—Ä–Ω–æ, —Ç–æ —É–≤–∏–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É
//
//
//
//
// import { useEffect } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
//
// // Types
// type DomainPost = Post & {
//   disabled: boolean
// }
//
// type Post = {
//   body: string
//   id: string
//   title: string
//   userId: string
// }
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const postsAPI = {
//   getPosts() {
//     return instance.get<Post[]>("posts")
//   },
//   deletePost(id: string) {
//     return instance.delete<{ message: string }>(`posts/${id}?delay=3`)
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "posts",
//   initialState: {
//     isLoading: false,
//     posts: [] as DomainPost[],
//   },
//   selectors: {
//     selectPosts: (state) => state.posts,
//     selectIsLoading: (state) => state.isLoading,
//   },
//   reducers: (create) => ({
//     setLoading: create.reducer<{ isLoading: boolean }>((state, action) => {
//       state.isLoading = action.payload.isLoading
//     }),
//     setDisable: create.reducer<{ disabled: boolean; id: string }>((state, action) => {
//       const post = state.posts.find((post) => post.id === action.payload.id)
//       if (post) {
//         post.disabled = action.payload.disabled
//       }
//     }),
//     fetchPosts: create.asyncThunk(
//       async (_arg, { rejectWithValue }) => {
//         try {
//           const res = await postsAPI.getPosts()
//           return { posts: res.data }
//         } catch (error) {
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           action.payload.posts.forEach((post) => {
//             state.posts.push({ ...post, disabled: false })
//           })
//         },
//       },
//     ),
//     deletePost: create.asyncThunk(
//       async (id: string, { dispatch, rejectWithValue }) => {
//         try {
//           dispatch(setLoading({ isLoading: true }))
//           dispatch(setDisable({ disabled: true, id }))
//           await postsAPI.deletePost(id)
//           return { id }
//         } catch (error) {
//           dispatch(setDisable({ disabled: false, id }))
//           return rejectWithValue(null)
//         } finally {
//           dispatch(setLoading({ isLoading: false }))
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           const index = state.posts.findIndex((post) => post.id === action.payload.id)
//           if (index !== -1) {
//             state.posts.splice(index, 1)
//           }
//         },
//       },
//     ),
//   }),
// })
//
// const postsReducer = slice.reducer
// const { setLoading, fetchPosts, deletePost, setDisable } = slice.actions
// const { selectPosts, selectIsLoading } = slice.selectors
//
// // Loader
// const Loader = () => {
//   return <h1>üîò Loading ...</h1>
// }
//
// // App
// const App = () => {
//   const dispatch = useAppDispatch()
//
//   const posts = useAppSelector(selectPosts)
//   const isLoading = useAppSelector(selectIsLoading)
//
//   useEffect(() => {
//     dispatch(fetchPosts())
//   }, [])
//
//   const deletePostHandler = (id: string) => {
//     dispatch(deletePost(id))
//   }
//
//   console.log(isLoading)
//
//   return (
//     <>
//       <div style={{ position: "absolute", top: "0px" }}>{isLoading && <Loader />}</div>
//       <div style={{ marginTop: "100px" }}>
//         <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//         {posts.map((post) => {
//           return (
//             <div key={post.id}>
//               <b>title</b>: <span style={{ marginRight: "15px" }}>{post.title}</span>
//               <button disabled={post.disabled} onClick={() => deletePostHandler(post.id)}>—É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç</button>
//             </div>
//           )
//         })}
//       </div>
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: postsReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤.
// // –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
// // –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Preview –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
// // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç "Post has been successfully deleted",
// // –∞ —Å–ª–µ–¥—É—é—â–∏–µ "Post with id: 63626ac315d01f80765587ee does not exist"
// // –¢.–µ. –±—ç–∫–µ–Ω–¥ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É–¥–∞–ª—è–µ—Ç, –∞ –ø–æ—Ç–æ–º —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç, —Ç.–∫. –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
//
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –∑–∞–¥–∏–∑–∞–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è,
// // —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
// // ‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∏–∑–∞–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞, –∞ –Ω–µ –≤—Å–µ –∫–Ω–æ–ø–∫–∏.
// // ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
//
//
//
// // –ó–∞–¥–∞—á–∞: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
// // –†–µ–∞–ª–∏–∑—É–π –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é getFirstElement<T>,
// // –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
// // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å undefined
//
// // const getFirstElement = <T>(arr: T[]): T | undefined => {
// //     return arr[0]
// //   }
//
//   // –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
//   console.log(getFirstElement([1, 2, 3])) // 1
//   console.log(getFirstElement(["apple", "banana", "cherry"])) // "apple"
//   console.log(getFirstElement([])) // undefined
//
//   // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getFirstElement
//   // ‚ùó–î–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–∂–µ–Ω–µ—Ä–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `T`
//   // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
//
//
//
//
//   import { createRoot } from "react-dom/client"
//   import { Provider, useDispatch, useSelector } from "react-redux"
//   import axios from "axios"
//   import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
//
//   // Types
//   type Photo = {
//     albumId: string
//     id: string
//     title: string
//     url: string
//   }
//
//   // Api
//   const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
//   const photosAPI = {
//     getPhotos() {
//       const url = Math.random() < 0.5 ? "photos" : "picturesüë∫"
//       return instance.get<Photo[]>(`${url}?delay=2`)
//     },
//   }
//
//   // Slice
//   const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
//   const slice = createAppSlice({
//     name: "photo",
//     initialState: {
//       photos: [] as Photo[],
//       isLoading: false,
//       error: null as string | null,
//     },
//     selectors: {
//       selectPhotos: (state) => state.photos,
//       selectIsLoading: (state) => state.isLoading,
//       selectError: (state) => state.error,
//     },
//     reducers: (create) => ({
//       setLoading: create.reducer<{ isLoading: boolean }>((state, action) => {
//         state.isLoading = action.payload.isLoading
//       }),
//       fetchPhotos: create.asyncThunk(
//         async (_arg, { dispatch, rejectWithValue }) => {
//           try {
//             dispatch(setLoading({ isLoading: true }))
//             const res = await photosAPI.getPhotos()
//             return { photos: res.data }
//           } catch (error) {
//             return rejectWithValue(null)
//           }
//         },
//         {
//           fulfilled: (state, action) => {
//             state.photos = action.payload.photos
//             state.error = null
//           },
//           rejected: (state) => {
//             state.error = "Error retrieving photos"
//           },
//           settled: (state, action) => {
//             state.isLoading = false
//           }
//         },
//       ),
//     }),
//   })
//
//   const photoReducer = slice.reducer
//   const { fetchPhotos, setLoading } = slice.actions
//   const { selectPhotos, selectIsLoading, selectError } = slice.selectors
//
//   // Loader
//   const Loader = () => {
//     return <h1>üîò Loading ...</h1>
//   }
//
//   // App
//   const App = () => {
//     const dispatch = useAppDispatch()
//
//     const photos = useAppSelector(selectPhotos)
//     const isLoading = useAppSelector(selectIsLoading)
//     const error = useAppSelector(selectError)
//
//     const getPhotosHandler = () => {
//       dispatch(fetchPhotos())
//     }
//
//     return (
//       <>
//         <h1>üì∏ –§–æ—Ç–æ</h1>
//         <h2 style={{ color: "red" }}>{!!error && error}</h2>
//         {isLoading && <Loader />}
//         <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
//         <div style={{ display: "flex", gap: "20px", margin: "20px" }}>
//           {photos.map((photo) => {
//             return (
//               <div key={photo.id}>
//                 <b>title</b>: {photo.title}
//                 <div>
//                   <img src={photo.url} alt="" />
//                 </div>
//               </div>
//             )
//           })}
//         </div>
//       </>
//     )
//   }
//
//   // Store
//   const store = configureStore({
//     reducer: {
//       [slice.name]: photoReducer,
//     },
//   })
//
//   type RootState = ReturnType<typeof store.getState>
//   type AppDispatch = typeof store.dispatch
//   const useAppDispatch = useDispatch.withTypes<AppDispatch>()
//   const useAppSelector = useSelector.withTypes<RootState>()
//
//   createRoot(document.getElementById("root")!).render(
//     <Provider store={store}>
//       <App />
//     </Provider>,
//   )
//   // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
//   // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤ 50% –ø–æ–¥–≥—Ä—É–∂–∞—é—Å—è —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–æ–π.
//   // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤ 50% –ø–æ–¥–≥—Ä—É–∂–∞—é—Å—è —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–æ–π.
//   // –ù–æ Loader –≤–∏—Å–∏—Ç –≤—Å–µ–≥–¥–∞.
//   // –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `//‚ùó XXX`, —á—Ç–æ–±—ã —Å–ø—Ä—è—Ç–∞—Ç—å Loader –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
//   // –¢.–µ. –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–π - Loader —É–±–∏—Ä–∞–µ–º
//   //      –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —Å –æ—à–∏–±–∫–æ–π - Loader —Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º.
//   // ‚ùó–û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, –≤ —ç–∫–∑–∞–º–µ–Ω–µ —ç—Ç–æ —É—á—Ç–µ–Ω–æ
//
//
//
//   import { useEffect } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore, Dispatch } from "@reduxjs/toolkit"
// import { unknown } from "zod"
//
// // Types
// type Todolist = {
//   id: string
//   title: string
//   order: number
//   createdAt: string
//   updatedAt: string
//   completed: boolean
// }
//
// type User = {
//   id: string
//   name: string
//   age: number
// }
//
// type UsersResponse = {
//   items: User[]
//   totalCount: number
// }
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getTodos() {
//     return instance.get<Todolist[]>("todo")
//   },
//   getUsers() {
//     return instance.get<UsersResponse>("user")
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "app",
//   initialState: {
//     todolists: [] as Todolist[],
//     users: [] as User[],
//     error: null as string | null,
//   },
//   selectors: {
//     selectTodolists: (state) => state.todolists,
//     selectUsers: (state) => state.users,
//     selectError: (state) => state.error,
//   },
//   reducers: (create) => ({
//     setError: create.reducer<{ error: string | null }>((state, action) => {
//       state.error = action.payload.error
//     }),
//     fetchTodolists: create.asyncThunk(
//       async (_arg, { dispatch, rejectWithValue }) => {
//         try {
//           const res = await api.getTodos()
//           return { todolists: res.data }
//         } catch (error: any) {
//           handleErrors(dispatch, error.message)
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.todolists = action.payload.todolists
//         },
//       },
//     ),
//     fetchUsers: create.asyncThunk(
//       async (_arg, { dispatch, rejectWithValue }) => {
//         try {
//           const res = await api.getUsers()
//           return { users: res.data.items }
//         } catch (error: any) {
//           handleErrors(dispatch, error.message)
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.users = action.payload.users
//         },
//       },
//     ),
//   }),
// })
//
// const appReducer = slice.reducer
// const { setError, fetchTodolists, fetchUsers } = slice.actions
// const { selectTodolists, selectUsers, selectError } = slice.selectors
//
// // Utils functions
// const handleErrors = (dispatch: Dispatch, errorMessage: string) => {
//   dispatch(setError({ error: errorMessage }))
// }
//
// const App = () => {
//   return (
//     <>
//       <h1>‚úÖTodos & üôÇUsers</h1>
//       <div style={{ display: "flex", justifyContent: "space-evenly" }}>
//         <Todos />
//         <Users />
//       </div>
//     </>
//   )
// }
//
// const Todos = () => {
//   const dispatch = useAppDispatch()
//   const todolists = useAppSelector(selectTodolists)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchTodolists())
//   }, [])
//
//   return (
//     <div>
//       <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//       {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//       {todolists.map((todolist) => (
//         <div style={todolist.completed ? { color: "grey" } : {}} key={todolist.id}>
//           <input type="checkbox" checked={todolist.completed} />
//           <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todolist.title}
//         </div>
//       ))}
//     </div>
//   )
// }
//
// const Users = () => {
//   const dispatch = useAppDispatch()
//   const users = useAppSelector(selectUsers)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchUsers())
//   }, [])
//
//   return (
//     <div>
//       <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
//       {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//       <div>
//         {users.map((user) => (
//           <div key={user.id}>
//             <b>name</b>:{user.name} - <b>age</b>:{user.age}
//           </div>
//         ))}
//       </div>
//     </div>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: appReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —Ç—É–¥—É–ª–∏—Å—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–∞–º–∏,
// // –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –≤–∏–¥–∏—Ç –æ—à–∏–±–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleErrors –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handleErrors, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É–≤–∏–¥–µ–ª –æ—à–∏–±–∫–∏:
// // 'Request failed with status code 404'
// //‚ùó –ö–æ–¥ —Ñ–∏–∫—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
// //‚ùó –¢–∏–ø any —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
//
// // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
// // const handleErrors = () => {
// //   console.log("error")
// // }