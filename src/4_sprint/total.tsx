import { useEffect } from "react"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
// import { createRoot } from "react-dom/client"
//
// // Types
// type Todolist = {
//   id: string
//   title: string
//   order: number
//   createdAt: string
//   updatedAt: string
//   completed: boolean
// }
//
// type User = {
//   id: string
//   name: string
//   age: number
// }
//
// type UsersResponse = {
//   items: User[]
//   totalCount: number
// }
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getTodos() {
//     return instance.get<Todolist[]>("todos")
//   },
//   getUsers() {
//     return instance.get<UsersResponse>("users")
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "app",
//   initialState: {
//     todolists: [] as Todolist[],
//     users: [] as User[],
//     error: null as string | null,
//   },
//   selectors: {
//     selectTodolists: (state) => state.todolists,
//     selectUsers: (state) => state.users,
//     selectError: (state) => state.error,
//   },
//   reducers: (create) => ({
//     setError: create.reducer<{ error: string | null }>((state, action) => {
//       state.error = action.payload.error
//     }),
//     fetchTodolists: create.asyncThunk(
//       async (_arg, { rejectWithValue }) => {
//         try {
//           // ‚ùóAAA
//           const res = await api.getTodos()
//           console.log(res.data)
//           // ‚ùóBBB
//           // return {todolists: res.data}
//         } catch (error) {
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.todolists = action.payload.todolists
//         },
//       },
//     ),
//     fetchUsers: create.asyncThunk(
//       async (_arg, { rejectWithValue }) => {
//         try {
//           // ‚ùóCCC
//           const res = await api.getUsers()
//           console.log(res.data.items)
//           // ‚ùóDDD
//           // return { users: res.data }
//         } catch (error) {
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.users = action.payload.users
//         },
//       },
//     ),
//   }),
// })
//
// const appReducer = slice.reducer
// const { fetchTodolists, fetchUsers } = slice.actions
// const { selectTodolists, selectUsers, selectError } = slice.selectors
//
// // App
// const App = () => {
//   return (
//     <>
//       <h1>‚úÖTodos & üôÇUsers</h1>
//       <div style={{ display: "flex", justifyContent: "space-evenly" }}>
//         <Todos />
//         <Users />
//       </div>
//     </>
//   )
// }
//
// const Todos = () => {
//   const dispatch = useAppDispatch()
//   const todolists = useAppSelector(selectTodolists)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchTodolists())
//   }, [])
//
//   return (
//     <div>
//       <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//       {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//       {todolists.map((todolist) => (
//         <div style={todolist.completed ? { color: "grey" } : {}} key={todolist.id}>
//           <input type="checkbox" checked={todolist.completed} />
//           <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todolist.title}
//         </div>
//       ))}
//     </div>
//   )
// }
//
// const Users = () => {
//   const dispatch = useAppDispatch()
//   const users = useAppSelector(selectUsers)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchUsers())
//   }, [])
//
//   return (
//     <div>
//       <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
//       {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//       <div>
//         {users.map((user) => {
//           return (
//             <div key={user.id}>
//               <b>name</b>:{user.name} - <b>age</b>:{user.age}
//             </div>
//           )
//         })}
//       </div>
//     </div>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: appReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ // ‚ùóAAA, ‚ùóBBB, ‚ùóCCC, ‚ùóDDD –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
// // –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤ –∏ —é–∑–µ—Ä–æ–≤
// // –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —É–∫–∞–∂–∏—Ç–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å–æ–±–ª—é–¥–∞—è –ø–æ—Ä—è–¥–æ–∫
//
// // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
// // const a = 1 + 1
// // return a
// // const c = 1 + 3
// // return c
//
//
// const res = await api.getTodos()
// return {todolists: res.data}
// const res = await api.getUsers()
// return { users: res.data }


// import axios from "axios"
// import { createRoot } from "react-dom/client"
// import { useEffect, useState } from "react"
//
// // Types
// type Comment = {
//   postId: string
//   id: string
//   name: string
//   email: string
//   body: string
// }
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const commentsAPI = {
//   getComments() {
//     return instance.get<Comment[]>("comments")
//   },
//   createComment() {
//     const payload = {
//       body: "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ –≤–∞–º",
//     }
//     // Promise.resolve() —Å—Ç–æ–∏—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã TS –Ω–µ —Ä—É–≥–∞–ª—Å—è –∏ –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è
//     // Promise.resolve() –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
//     return instance.post<Comment>("comments", payload)
//   },
// }
//
// // App
// export const App = () => {
//   const [comments, setComments] = useState<Comment[]>([])
//
//   useEffect(() => {
//     commentsAPI.getComments().then((res) => {
//       setComments(res.data)
//     })
//   }, [])
//
//   const createPostHandler = () => {
//     commentsAPI.createComment().then((res: any) => {
//       const newComment = res.data
//       setComments([newComment, ...comments])
//     })
//   }
//
//   return (
//     <>
//       <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//       <div style={{ marginBottom: "15px" }}>
//         <button style={{ marginLeft: "15px" }} onClick={() => createPostHandler()}>
//           –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
//         </button>
//       </div>
//
//       {comments.map((c) => {
//         return (
//           <div key={c.id}>
//             <b>Comment</b>: {c.body}{" "}
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// createRoot(document.getElementById("root")!).render(<App />)
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
// // –¢–∏–ø–∏–∑–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ —É–∫–∞–∑–∞—Ç—å (–≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞).
// // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// return instance.post<Comment>("comments", payload)


// import { createRoot } from "react-dom/client"
// import { BrowserRouter, Route, Routes, useNavigate, useParams } from "react-router"
//
// type User = {
//   id: number
//   name: string
//   avatar: string
//   age: number
//   address: string
// }
//
// const users: User[] = [
//   {
//     id: 1,
//     name: "my Name",
//     age: 32,
//     avatar: "‚Äî‡∏Ö/·ê†.Ã´ .·êü\\‡∏Ö‚Äî",
//     address: "my Address",
//   },
//   {
//     id: 2,
//     name: "John",
//     age: 22,
//     avatar: ":)",
//     address: "California",
//   },
//   {
//     id: 3,
//     name: "Mike",
//     age: 18,
//     avatar: "^._.^",
//     address: "New York",
//   },
//   {
//     id: 4,
//     name: "Emma",
//     age: 38,
//     avatar: "/·ê†-Íûà-·êü\\",
//     address: "Washington",
//   },
// ]
//
// const StartPage = () => {
//   const navigate = useNavigate()
//   const friends = users.filter((u) => u.id !== 1)
//
//   const mappedFriends = friends.map((f, i) => {
//     const go = () => {
//       navigate("/friend/" + f.id)
//     }
//
//     return (
//       <div key={i} onClick={go} style={{ paddingLeft: 24, color: "blue", cursor: "pointer" }}>
//         {f.name}, {f.age}
//       </div>
//     )
//   })
//
//   return (
//     <div>
//       <h2>üôÇ My profile</h2>
//       <Profile userId={1} />
//       <hr />
//       <h2>üë™ Friends</h2>
//       {mappedFriends}
//     </div>
//   )
// }
//
// const Profile = ({ userId }: { userId?: number }) => {
//   const { id } = useParams<{ id: string }>()
//   const user = users.find((u) => u.id === +(id || userId || 0))
//
//   return (
//     <div>
//       <div>
//         <b>avatar</b> {user?.avatar}
//       </div>
//       <div>
//         <div>
//           <b>name</b>: {user?.name}
//         </div>
//         <div>
//           <b>age</b>: {user?.age}
//         </div>
//         <div>
//           <b>address</b>: {user?.address}
//         </div>
//       </div>
//     </div>
//   )
// }
//
// createRoot(document.getElementById("root")!).render(
//   <BrowserRouter>
//     <Routes>
//       <Route path={"/"} element={<StartPage />} />
//       <Route path={"friend/:id"} element={<Profile />} />
//       <Route path={"*"} element={<h1>‚ùå404 Page Not Found‚ùå</h1>} />
//     </Routes>
//   </BrowserRouter>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
// // –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.
// // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –≤–∏–¥–∏–º ‚ùå404 Page Not Found‚ùå
// // –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// // –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä—É–≥–µ.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
// <Route path={"friend/:id"} element={<Profile />} />




// import { configureStore, createSlice } from "@reduxjs/toolkit"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
//
// // slice
// const slice = createSlice({
//   name: "playlist",
//   initialState: {
//     albums: [
//       {
//         id: 1,
//         title: "Album 1",
//         songs: [
//           { id: 1, title: "Song 1-1" },
//           { id: 2, title: "Song 1-2" },
//         ],
//       },
//       {
//         id: 2,
//         title: "Album 2",
//         songs: [
//           { id: 3, title: "Song 2-1" },
//           { id: 4, title: "Song 2-2" },
//         ],
//       },
//     ],
//   },
//   reducers: {
//     removeLastSongFromAlbum: (state, action) => {
//       console.log(action.payload)
//       const elArr = state.albums.find(item => item.id === action.payload)
//       console.log(elArr)
//       if (elArr) {
//         elArr.songs.pop()
//       }
//       return state
//     },
//   },
//   selectors: {
//     selectAlbums: (state) => state.albums,
//   },
// })
//
// const { removeLastSongFromAlbum } = slice.actions
// const { selectAlbums } = slice.selectors
//
// // App.tsx
// const App = () => {
//   const albums = useAppSelector(selectAlbums)
//   const dispatch = useAppDispatch()
//
//   const removeLastSong = (albumId: number) => {
//     dispatch(removeLastSongFromAlbum(albumId))
//   }
//
//   return (
//     <>
//       {albums.map((album) => (
//         <div key={album.id}>
//           <h3>{album.title}</h3>
//           <button onClick={() => removeLastSong(album.id)}>Remove Last Song</button>
//           <ul>
//             {album.songs.map((song) => (
//               <li key={song.id}>{song.title}</li>
//             ))}
//           </ul>
//         </div>
//       ))}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: {
//     playlist: slice.reducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// // main.ts
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü–ª–µ–π–ª–∏—Å—Ç —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ –∞–ª—å–±–æ–º—ã, –∏ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ Remove Last Song –¥–æ–ª–∂–Ω–∞ —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–µ—Å–Ω—é –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∞–ª—å–±–æ–º–∞.
//
// // ü™õ –ó–∞–¥–∞—á–∞:
// // –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã—à–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–º–µ—Å—Ç–æ return state.
// // ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
// // ‚ùó–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é action.payload (const {id} = action.payload)
// // ‚ùó–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ action.payload (const id = action.payload.id)
// const album = state.albums.find(a => a.id === action.payload)
// if (album && album.songs.length > 0) {
//   album.songs.pop()
// }


// import { configureStore, createSlice } from "@reduxjs/toolkit"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
//
// // slice
// const slice = createSlice({
//   name: "products",
//   initialState: [
//     { id: 1, name: "Laptop", inStock: true, price: 1500 },
//     { id: 2, name: "Smartphone", inStock: false, price: 800 },
//     { id: 3, name: "Tablet", inStock: true, price: 600 },
//   ],
//   reducers: {
//     applyDiscount: (state, action) => {
//       const discount = action.payload / 100;
//       state.forEach((el) => {
//         el.price = el.price * (1 - discount);
//       })
//     },
//   },
//   selectors: {
//     selectProducts: (state) => state,
//   },
// })
//
// const { applyDiscount } = slice.actions
// const { selectProducts } = slice.selectors
//
// // App.tsx
// const App = () => {
//   const products = useAppSelector(selectProducts)
//   const dispatch = useAppDispatch()
//
//   const handleDiscount = (discount: number) => {
//     dispatch(applyDiscount(discount))
//   }
//
//   return (
//     <div>
//       <button onClick={() => handleDiscount(10)}>10% Discount</button>
//       <button onClick={() => handleDiscount(30)}>30% Discount</button>
//       <button onClick={() => handleDiscount(50)}>50% Discount</button>
//       <ul>
//         {products.map((product) => (
//           <li key={product.id}>
//             <span>
//               {product.name} ({product.inStock ? "In Stock" : "Out of Stock"}) - ${product.price.toFixed(2)}
//             </span>
//           </li>
//         ))}
//       </ul>
//     </div>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: {
//     products: slice.reducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// // main.ts
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å 10%, 30% –∏–ª–∏ 50% —Å–∫–∏–¥–∫–∞–º–∏ —Ü–µ–Ω—ã –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã —É–º–µ–Ω—å—à–∏—Ç—å—Å—è –Ω–∞
// // —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.
//
// // ü™õ –ó–∞–¥–∞—á–∞:
// // –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —Ü–µ–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —É–º–µ–Ω—å—à–∞–ª–∞—Å—å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç.
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–º–µ—Å—Ç–æ return state.
// // ‚ùó–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
//
// const discount = action.payload / 100;
// state.forEach((el) => {
//   el.price = el.price * (1 - discount);
// })

// import { useEffect } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore, Dispatch } from "@reduxjs/toolkit"
//
// // Types
// type Todolist = {
//   id: string
//   title: string
//   order: number
//   createdAt: string
//   updatedAt: string
//   completed: boolean
// }
//
// type User = {
//   id: string
//   name: string
//   age: number
// }
//
// type UsersResponse = {
//   items: User[]
//   totalCount: number
// }
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getTodos() {
//     return instance.get<Todolist[]>("todo")
//   },
//   getUsers() {
//     return instance.get<UsersResponse>("user")
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "app",
//   initialState: {
//     todolists: [] as Todolist[],
//     users: [] as User[],
//     error: null as string | null,
//   },
//   selectors: {
//     selectTodolists: (state) => state.todolists,
//     selectUsers: (state) => state.users,
//     selectError: (state) => state.error,
//   },
//   reducers: (create) => ({
//     setError: create.reducer<{ error: string | null }>((state, action) => {
//       state.error = action.payload.error
//     }),
//     fetchTodolists: create.asyncThunk(
//       async (_arg, { dispatch, rejectWithValue }) => {
//         try {
//           const res = await api.getTodos()
//           return { todolists: res.data }
//         } catch (error: any) {
//           handleErrors(dispatch, error.message)
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.todolists = action.payload.todolists
//         },
//       },
//     ),
//     fetchUsers: create.asyncThunk(
//       async (_arg, { dispatch, rejectWithValue }) => {
//         try {
//           const res = await api.getUsers()
//           return { users: res.data.items }
//         } catch (error: any) {
//           handleErrors(dispatch, error.message)
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.users = action.payload.users
//         },
//       },
//     ),
//   }),
// })
//
// const appReducer = slice.reducer
// const { setError, fetchTodolists, fetchUsers } = slice.actions
// const { selectTodolists, selectUsers, selectError } = slice.selectors
//
// // Utils functions
// const handleErrors = (dispatch: AppDispatch, errorMessage: string) => {
//   dispatch(setError({ error: errorMessage }))
// }
//
// const App = () => {
//   return (
//     <>
//       <h1>‚úÖTodos & üôÇUsers</h1>
//       <div style={{ display: "flex", justifyContent: "space-evenly" }}>
//         <Todos />
//         <Users />
//       </div>
//     </>
//   )
// }
//
// const Todos = () => {
//   const dispatch = useAppDispatch()
//   const todolists = useAppSelector(selectTodolists)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchTodolists())
//   }, [])
//
//   return (
//     <div>
//       <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//       {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//       {todolists.map((todolist) => (
//         <div style={todolist.completed ? { color: "grey" } : {}} key={todolist.id}>
//           <input type="checkbox" checked={todolist.completed} />
//           <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todolist.title}
//         </div>
//       ))}
//     </div>
//   )
// }
//
// const Users = () => {
//   const dispatch = useAppDispatch()
//   const users = useAppSelector(selectUsers)
//   const error = useAppSelector(selectError)
//
//   useEffect(() => {
//     dispatch(fetchUsers())
//   }, [])
//
//   return (
//     <div>
//       <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
//       {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//       <div>
//         {users.map((user) => (
//           <div key={user.id}>
//             <b>name</b>:{user.name} - <b>age</b>:{user.age}
//           </div>
//         ))}
//       </div>
//     </div>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: appReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ —Ç—É–¥—É–ª–∏—Å—Ç–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–∞–º–∏,
// // –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –≤–∏–¥–∏—Ç –æ—à–∏–±–æ–∫, –ø–æ—Ç–æ–º—É —á—Ç–æ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è handleErrors –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.
// // –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é handleErrors, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ —É–≤–∏–¥–µ–ª –æ—à–∏–±–∫–∏:
// // 'Request failed with status code 404'
// //‚ùó –ö–æ–¥ —Ñ–∏–∫—Å–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
// //‚ùó –¢–∏–ø any —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
//
// // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
// // const handleErrors = () => {
// //   console.log("error")
// // }
// const handleErrors = (dispatch: AppDispatch, errorMessage: string) => {
//   dispatch(setError({ error: errorMessage }))
// }


// import { configureStore, createSlice } from "@reduxjs/toolkit"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
//
// // oxygenCounter slice
// const oxygenSlice = createSlice({
//   name: "oxygenCounter",
//   initialState: {
//     percent: 21,
//   },
//   reducers: {
//     increase: (state) => {
//       state.percent += 1
//     },
//   },
//   selectors: {
//     selectPercent: (state) => state.percent,
//   },
// })
// const { increase } = oxygenSlice.actions
// const { selectPercent } = oxygenSlice.selectors
//
// // temperature slice
// const temperatureSlice = createSlice({
//   name: "temperatureCounter",
//   initialState: {
//     celsius: 20,
//   },
//   reducers: {},
//   selectors: {
//     selectCelsius: (state) => state.celsius,
//   },
//   extraReducers: (builder) => {
//     builder.addCase(increase, (state) => {
//       state.celsius += 2
//     })
//   }
// })
//
// const { selectCelsius } = temperatureSlice.selectors
//
// // App.tsx
// const App = () => {
//   const oxygen = useAppSelector(selectPercent)
//   const temperature = useAppSelector(selectCelsius)
//   const dispatch = useAppDispatch()
//
//   return (
//     <>
//       <button onClick={() => dispatch(increase())}>Add Oxygen</button>
//       <div>Oxygen: {oxygen}%</div>
//       <hr />
//       <div>Temperature: {temperature}¬∞C</div>
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: {
//     oxygenCounter: oxygenSlice.reducer,
//     temperatureCounter: temperatureSlice.reducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// // main.ts
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –£ –≤–∞—Å –µ—Å—Ç—å –¥–≤–∞ —Å—á–µ—Ç—á–∏–∫–∞: –¥–ª—è —É—Ä–æ–≤–Ω—è –∫–∏—Å–ª–æ—Ä–æ–¥–∞ (%) –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (¬∞C).
// // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Add Oxygen —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å –∫–∏—Å–ª–æ—Ä–æ–¥–∞.
//
// // ü™õ –ó–∞–¥–∞—á–∞:
// // –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É:
// // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É Add Oxygen –ø–æ–º–∏–º–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∫–∏—Å–ª–æ—Ä–æ–¥–∞
// // —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 2¬∞C
//
// // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// // ‚ùó–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
// // üí°–ü–æ–¥—Å–∫–∞–∑–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ extraReducers
//
// extraReducers: (builder) => {
//   builder.addCase(increase, (state) => {
//     state.celsius += 2
//   })
// }


// import { CSSProperties } from "react"
// import { createRoot } from "react-dom/client"
// import { BrowserRouter, NavLink, Route, Routes } from "react-router"
//
// const footer: CSSProperties = {
//   padding: 10,
//   background: "lightslategrey",
// }
//
// const link: CSSProperties = {
//   color: "lightsalmon",
//   fontSize: 20,
// }
//
// const Dragons = () => {
//   return <h1>üê≤ üê≤ üê≤</h1>
// }
//
// const Cats = () => {
//   return <h1>üò∫ üê± üòº</h1>
// }
//
// const Dogs = () => {
//   return <h1>üê∂ üê∂ üê∂</h1>
// }
//
// const PageNotFound = () => {
//   return <h1>4Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£</h1>
// }
//
// const Menu = () => {
//   return (
//     <ul>
//       <li>
//         <NavLink to={Path.Dragons} style={link}>
//           dragons
//         </NavLink>
//       </li>
//       <li>
//         <NavLink to={Path.Cats} style={link}>
//           cats
//         </NavLink>
//       </li>
//       <li>
//         <NavLink to={Path.Dogs} style={link}>
//           dogs
//         </NavLink>
//       </li>
//     </ul>
//   )
// }
//
// // Routing
// const Path = {
//   Dragons: "dragons",
//   Cats: "cats",
//   Dogs: "dogs",
// } as const
//
// const Routing = () => {
//   return (
//     <Routes>
//       <Route path={"/"} element={<div></div>} />
//       <Route path={Path.Dragons} element={<Dragons />} />
//       <Route path={Path.Cats} element={<Cats />} />
//       <Route path={Path.Dogs} element={<Dogs />} />
//       <Route path={"*"} element={<PageNotFound />} />
//     </Routes>
//   )
// }
//
// const App = () => {
//   return (
//     <>
//       <Menu />
//       <Routing />
//       <footer style={footer}>
//         <h2>Footer</h2>
//       </footer>
//     </>
//   )
// }
//
// createRoot(document.getElementById("root")!).render(
//   <BrowserRouter>
//     <App />
//   </BrowserRouter>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –†–µ–∞–ª–∏–∑—É–π—Ç–µ Page not found
//
// // ü™õ –ó–∞–¥–∞—á–∞:
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ {/*‚ùóXXX */},
// // —á—Ç–æ–±—ã –ø—Ä–∏ url `http://localhost:3000/fsdfdsf` –∏ –¥—Ä—É–≥–∏—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
// // –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Ä–æ—É—Ç Page not found
