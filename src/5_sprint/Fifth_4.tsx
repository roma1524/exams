// import { configureStore } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { useEffect, useState } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider } from "react-redux"
//
// // API
// type Photo = {
//   albumId: string
//   id: string
//   title: string
//   url: string
// }
//
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => ({
//     getPhotos: builder.query<Photo[], void>({
//       query: () => "photos?delay=1",
//     }),
//   }),
// })
//
// const { useGetPhotosQuery } = api
//
// // App.tsx
// const App = () => {
//   const { data, isSuccess, isLoading } = useGetPhotosQuery()
//   const [showSuccessMessage, setShowSuccessMessage] = useState(false)
//
//   useEffect(() => {
//     // ‚ùóX
//     /*let timerId: number
//
//     if (isSuccess) {
//       setShowSuccessMessage(true)
//       timerId = setTimeout(() => {
//         setShowSuccessMessage(false)
//       },  2000)
//     }
//     return () => {
//       clearInterval(timerId)
//     }*/
//   }, [isSuccess])
//
//   return (
//     <>
//       {isLoading && <b style={{ fontSize: "36px" }}>üïù–ó–∞–≥—Ä—É–∑–∫–∞...</b>}
//       {showSuccessMessage && <b style={{ fontSize: "36px" }}>‚úÖ –£—Å–ø–µ—Ö</b>}
//       {data?.map((el) => {
//         return (
//           <div key={el.id} style={{ margin: "5px", padding: "5px", width: "200px" }}>
//             <b>title</b> - {el.title}
//             <img src={el.url} alt={`${el.title} image`} />
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: {
//     [api.reducerPath]: api.reducer,
//   },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )
//
// // üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// // –ù–∞ —ç–∫—Ä–∞–Ω–µ –º—ã –≤–∏–¥–∏–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –∑–∞—Ç–µ–Ω–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (photos).
//
// // ü™õ –ó–∞–¥–∞—á–∞:
// // –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùóX` –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
// // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ `‚úÖ –£—Å–ø–µ—Ö` –∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏—Å—á–µ–∑–Ω—É—Ç—å
//
// // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ photos –∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ –º—ã –≤–∏–¥–∏–º –æ–± —ç—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (‚úÖ –£—Å–ø–µ—Ö) –∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–∞–µ—Ç http://surl.li/mhseut
// // ‚ùó–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏ ---



// import { createRoot } from "react-dom/client"
//
// export const App = () => {
//   return (
//     <div>
//       <h2>–í –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –≤–µ—Ç–æ–∫ ?</h2>
//       <ul>
//         <li>1 - –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –≤ –æ–±–µ–∏—Ö –≤–µ—Ç–∫–∞—Ö –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ —Å—Ç—Ä–æ–∫</li>
//         <li>2 - –í —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –≤–µ—Ç–∫–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤</li>
//         <li>3 - –í —Å–ª—É—á–∞–µ –∫–æ–≥–¥–∞ –≤–µ—Ç–∫–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è</li>
//         <li>4 - –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç, —ç—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –°–µ–≥–æ–¥–Ω—è git –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º –≤—Å–µ —Å–∞–º –º–æ–∂–µ—Ç —Ä–∞–∑—Ä—É–ª–∏—Ç—å</li>
//         <li>5 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
//       </ul>
//     </div>
//   )
// }
//
// createRoot(document.getElementById("root")!).render(<App />)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í –∫–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ —Å–ª–∏—è–Ω–∏–∏ –≤–µ—Ç–æ–∫ ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1 +++

/*import { createRoot } from "react-dom/client"

export const App = () => {
  return (
    <div>
      <h2>–ö–∞–∫–æ–µ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–æ ?</h2>
      <ul>
        <li>
          1 - –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª –±—ã–ª –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é git init –∏ –∑–∞–∫–æ–º–º–∏—á–µ–Ω, git –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ
          —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω—ë–º.
        </li>
        <li>
          2 - –í–µ—Ç–∫–∏ –≤ Git –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–æ–º–º–∏—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ —Ñ–∏—á—É –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥
          (–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–π), –º—ã —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É. –û–Ω–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º
          –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
        </li>
        <li>
          3 - –ö–æ–º–∞–Ω–¥–∞ git add —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git. –° –µ–µ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç –±–µ–∑
          —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        </li>
        <li>4 - –ù–∏ –æ–¥–Ω–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–µ –≤–µ—Ä–Ω–æ</li>
      </ul>
    </div>
  )
}

createRoot(document.getElementById("root")!).render(<App />)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ö–∞–∫–æ–µ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–æ ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1
// 2 +++



/*import { configureStore } from "@reduxjs/toolkit"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { createRoot } from "react-dom/client"
import { Provider } from "react-redux"

type Comment = {
  postId: string
  id: string
  name: string
  email: string
  body: string
}

// Api
const api = createApi({
  reducerPath: "commentsApi",
  tagTypes: ["Comment"],
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => ({
    getComments: builder.query<Comment[], void>({
      query: () => "comments",
      providesTags: ["Comment"],
      // ‚ùó‚ùó‚ùóXXX ‚ùó‚ùó‚ùó
      transformResponse: (response: Comment[]) => {
        return response.reverse();
      },
    }),
    addComment: builder.mutation<Comment, string>({
      query: (title) => ({
        method: "POST",
        url: "comments",
        body: { body: title },
      }),
      invalidatesTags: ["Comment"],
    }),
  }),
})

const { useGetCommentsQuery, useAddCommentMutation } = api

// App.tsx
const App = () => {
  const { data } = useGetCommentsQuery()
  const [addComment] = useAddCommentMutation()

  const addCommentHandler = () => {
    addComment("–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞. –ï–µ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
  }

  return (
    <>
      <button onClick={addCommentHandler}>Add comment</button>
      {data?.map((comment) => {
        return (
          <div key={comment.id} style={{ border: "1px solid", margin: "5px", padding: "5px" }}>
            <p>body - {comment.body}</p>
          </div>
        )
      })}
    </>
  )
}

// store.ts
const store = configureStore({
  reducer: {
    [api.reducerPath]: api.reducer,
  },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
})

createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
)*/

// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Add comment –∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
// –ù–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞

// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ // ‚ùó‚ùó‚ùóXXX ‚ùó‚ùó‚ùó,
// —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞. –ß—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
// –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –≤ –Ω–∞—á–∞–ª–µ –º–∞—Å—Å–∏–≤–∞

// transformResponse: (response: Comment[]) => {
//   return response.reverse();
// } +++


// import { configureStore } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery, setupListeners } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider } from "react-redux"
//
// type Comment = {
//   postId: string
//   id: string
//   name: string
//   email: string
//   body: string
// }
//
// // Api
// const api = createApi({
//   reducerPath: "commentsApi",
//   tagTypes: ["Comment"],
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => ({
//     getComments: builder.query<Comment[], void>({
//       query: () => "comments",
//       providesTags: ["Comment"],
//     }),
//     addComment: builder.mutation<Comment, string>({
//       query: (title) => ({
//         method: "POST",
//         url: "comments",
//         body: { body: title },
//       }),
//       invalidatesTags: ["Comment"],
//     }),
//   }),
// })
//
// const { useGetCommentsQuery, useAddCommentMutation } = api
//
// // App.tsx
// const App = () => {
//   const { data } = useGetCommentsQuery(undefined, { refetchOnFocus: true })
//   const [addComment] = useAddCommentMutation()
//
//   const addCommentHandler = () => {
//     addComment("–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞. –ï–µ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
//   }
//
//   return (
//     <>
//       <button onClick={addCommentHandler}>Add comment</button>
//       {data
//         ?.slice()
//         .reverse()
//         .map((comment) => {
//           return (
//             <div key={comment.id} style={{ border: "1px solid", margin: "5px", padding: "5px" }}>
//               <p>body - {comment.body}</p>
//             </div>
//           )
//         })}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: {
//     [api.reducerPath]: api.reducer,
//   },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// setupListeners(store.dispatch)
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// –ù–∞ 39 —Å—Ç—Ä–æ–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω refetchOnFocus.
// –ù–æ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –¥–≤—É—Ö –≤–∫–ª–∞–¥–∫–∞—Ö, –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ–¥–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ,
// –∞ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥—É—é, —Ç–æ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤—ã –Ω–µ —É–≤–∏–¥–∏—Ç–µ ü•≤
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ–º, –ø–æ—á–µ–º—É refetchOnFocus –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.

// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–¥–µ —á—Ç–æ–±—ã, –ø–æ—á–∏–Ω–∏—Ç—å refetchOnFocus ?
// üí°–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏,
// —Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ. –í –æ—Ç–≤–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ

//  –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥

// setupListeners(store.dispatch) +++


// import { configureStore } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider } from "react-redux"
// import { useState } from "react"
//
// type Post = {
//   body: string
//   id: string
//   title: string
//   userId: string
// }
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   tagTypes: ["Post"],
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api" }),
//   endpoints: (builder) => ({
//     getPosts: builder.query<Post[], void>({
//       query: () => "posts",
//       providesTags: ["Post"],
//     }),
//     removePost: builder.mutation<{ message: string }, string>({
//       query: (id) => ({
//         method: "DELETE",
//         url: `posts/${id}?delay=3`,
//       }),
//       async onQueryStarted(id, { queryFulfilled, dispatch }) {
//         const patchResult = dispatch(
//           api.util.updateQueryData("getPosts", undefined, (state) => {
//             const index = state.findIndex((post) => post.id === id)
//             if (index !== -1) {
//               state.splice(index, 1)
//             }
//           }),
//         )
//         try {
//           // ‚ùó‚ùó‚ùóXXX ‚ùó‚ùó‚ùó
//           await queryFulfilled
//         } catch (error) {
//           // ‚ùó‚ùó‚ùóYYY ‚ùó‚ùó‚ùó
//           patchResult.undo()
//         }
//       },
//       invalidatesTags: ["Post"],
//     }),
//   }),
// })
//
// const { useGetPostsQuery, useRemovePostMutation } = api
//
// // App.tsx
// const App = () => {
//   const { data } = useGetPostsQuery()
//   const [removePost] = useRemovePostMutation()
//
//   const [loadingId, setLoadingId] = useState<string | null>(null)
//
//   const removePostHandler = (id: string) => {
//     setLoadingId(id)
//     removePost(id).finally(() => {
//       setLoadingId(null)
//     })
//   }
//
//   return (
//     <>
//       {data?.map((el) => {
//         return (
//           <div key={el.id} style={{ display: "flex", alignItems: "center" }}>
//             {loadingId === el.id && <h3>Loading...</h3>}
//             <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
//               <b>title</b> - {el.title}
//             </div>
//             <button onClick={() => removePostHandler(el.id)}>X</button>
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// Optimistic update –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ—á—Ç–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.
// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ // ‚ùó‚ùó‚ùóXXX ‚ùó‚ùó‚ùó –∏ // ‚ùó‚ùó‚ùóYYY ‚ùó‚ùó‚ùó
// –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä?
// await queryFulfilled patchResult.undo() +++

// import { createRoot } from "react-dom/client"
// import { useState } from "react"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { configureStore, nanoid } from "@reduxjs/toolkit"
// import { Provider } from "react-redux"
//
// type User = {
//   id: number
//   name: string
//   age: number
// }
//
// type UserResponse = {
//   totalCount: number
//   items: User[]
// }
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => ({
//     getUsers: builder.query<UserResponse, { pageSize: number; pageNumber: number }>({
//       query: ({ pageSize, pageNumber }) => {
//         return {
//           url: `users`,
//           params: {
//             pageSize,
//             pageNumber,
//           },
//         }
//       },
//     }),
//   }),
// })
//
// const { useGetUsersQuery } = api
//
// // App
// const PAGE_SIZE = 3
//
// export const App = () => {
//   const [currentPage, setCurrentPage] = useState(1)
//
//   const { data } = useGetUsersQuery({ pageSize: PAGE_SIZE, pageNumber: currentPage })
//
//   const setPageHandler = (page: number) => {
//     setCurrentPage(page)
//   }
//
//   const length = data?.totalCount ? Math.ceil(data?.totalCount / PAGE_SIZE) : 1
//   const buttons = Array.from({ length }, (_, i) => ({
//     id: nanoid(),
//     title: i + 1,
//   }))
//
//   return (
//     <>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       {data?.items.map((u) => (
//         <div style={{ marginBottom: "15px" }} key={u.id}>
//           <b>name</b>: {u.name}
//           <b>age</b>: {u.age}
//         </div>
//       ))}
//
//       {buttons.map((b) => (
//         <button
//           key={b.id}
//           style={b.title === currentPage ? { backgroundColor: "lightblue" } : {}}
//           onClick={() => setPageHandler(b.title)}
//         >
//           {b.title}
//         </button>
//       ))}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
// –ù–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ getUsers —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –≤–µ—Ä–Ω–æ
// ‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// ‚ùó–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
//  –ü–µ—Ä–≤—ã–º: pageSize, –≤—Ç–æ—Ä—ã–º pageNumber.
// –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –∫–æ–¥–∞,
// –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

// getUsers: builder.query<UserResponse, { pageSize: number; pageNumber: number }>({
//   query: ({ pageSize, pageNumber }) => {
//     return {
//       url: `users`,
//       params: {
//         pageSize,
//         pageNumber,
//       },
//     }
//   },
// })