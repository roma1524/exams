/*
import { createRoot } from "react-dom/client"

export const App = () => {
  return (
    <h2>
      –ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è ¬´—Å–¥–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤¬ª (–∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å) –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–±–æ—á–µ–π –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –≤—ã
      –º–æ–≥–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ? –û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤—ã –ø–æ–∫–∞ –Ω–µ
      –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–º–∏—Ç–∞.
    </h2>
  )
}

createRoot(document.getElementById("root")!).render(<App />)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞ –≤—Ä–µ–º—è ¬´—Å–¥–∞—Ç—å –≤ –∞—Ä—Ö–∏–≤¬ª (–∏–ª–∏ –æ—Ç–ª–æ–∂–∏—Ç—å) –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–±–æ—á–µ–π
// –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ? –û—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
// –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≤—ã –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–º–º–∏—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: git init

// git stash +*/


/*import { configureStore } from "@reduxjs/toolkit"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { createRoot } from "react-dom/client"
import { Provider } from "react-redux"

type Photo = {
  albumId: string
  id: string
  title: string
  url: string
}

// Api
const api = createApi({
  reducerPath: "api",
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => {
    return {
      getPhotos: builder.query<Photo[], void>({
        query: () => "photos",
      }),
    }
  },
})

const { useGetPhotosQuery, useLazyGetPhotosQuery } = api

// App.tsx
const App = () => {
  // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó

  const [trigger, {data}] = useLazyGetPhotosQuery()

  const getPhotosHandler = () => {
    trigger()
  }

  return (
    <>
      <button onClick={getPhotosHandler}>Get photos</button>
      {data?.map((el) => {
        return (
          <div key={el.id} style={{ border: "1px solid", margin: "5px", padding: "5px" }}>
            <div>
              <b>title</b> - {el.title}
            </div>
          </div>
        )
      })}
    </>
  )
}

// store.ts
const store = configureStore({
  reducer: { [api.reducerPath]: api.reducer },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
})

createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü–æ—á–∏–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `Get photos`
// –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–µ–¥—à–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥

// const [trigger, {data}] = useLazyGetPhotosQuery() +++


/*import { configureStore } from "@reduxjs/toolkit"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { createRoot } from "react-dom/client"
import { Provider } from "react-redux"

type Post = {
  body: string
  id: string
  title: string
  userId: string
}

// Api
const api = createApi({
  reducerPath: "api",
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => {
    return {
      getPosts: builder.query<Post[], void>({
        query: () => "posts"
      }),
      removePost: builder.mutation<Post[], string>({
        query: (id) => ({
          url: `posts/${id}`,
          method: "DELETE"
        })
      }),
      // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
    }
  }
})

const { useGetPostsQuery, useRemovePostMutation } = api

// App.tsx
const App = () => {
  const { data } = useGetPostsQuery()
  const [removePost] = useRemovePostMutation()

  const removePostHandler = (id: string) => {
    removePost(id)
  }

  return (
    <>
      {data?.map((el) => {
        return (
          <div key={el.id} style={{ display: "flex", alignItems: "center" }}>
            <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
              <p>
                <b>title</b> - {el.title}
              </p>
            </div>
            <button onClick={() => removePostHandler(el.id)}>x</button>
          </div>
        )
      })}
    </>
  )
}

// store.ts
const store = configureStore({
  reducer: { [api.reducerPath]: api.reducer },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware)
})

createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` —á—Ç–æ–±—ã –Ω–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `x` –ø–æ—Å—Ç —É–¥–∞–ª–∏–ª—Å—è.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ
// ‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

// removePost: builder.mutation<Post[], string>({
//   query: (id) => ({
//     url: `posts/${id}`,
//     method: "DELETE"
//   })
// })  -----


/*import { configureStore } from "@reduxjs/toolkit"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { createRoot } from "react-dom/client"
import { Provider } from "react-redux"

type Comment = {
  postId: string
  id: string
  name: string
  email: string
  body: string
}

// Api
const api = createApi({
  reducerPath: "commentsApi",
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => {
    return {
      getComments: builder.query<Comment[], void>({
        query: () => "comments",
      }),
      addComment: builder.mutation<Comment, string>({
        query: (com) => ({
          url: "comments",
          method: 'POST',
          body: {
            postId: 1,
            name: "Test User",
            email: "test@example.com",
            body: com
          }
        })
      })
      // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
    }
  },
})

const { useGetCommentsQuery, useAddCommentMutation  } = api

// App.tsx
const App = () => {
  const { data } = useGetCommentsQuery()
  const [addComment] = useAddCommentMutation()

  const addCommentHandler = () => {
    addComment("–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞. –ï–µ –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
  }

  return (
    <>
      <button onClick={addCommentHandler}>Add comment</button>
      {data?.map((el) => {
        return (
          <div key={el.id} style={{ border: "1px solid", margin: "5px", padding: "5px" }}>
            <p>body - {el.body}</p>
          </div>
        )
      })}
    </>
  )
}

// store.ts
const store = configureStore({
  reducer: {
    [api.reducerPath]: api.reducer,
  },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
})

createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ë–µ–ª—ã–π —ç–∫—Ä–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤ —á–µ–º –æ—à–∏–±–∫–∞

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` —á—Ç–æ–±—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `Add comment`
// –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª—è–ª—Å—è –∏ –±—ã–ª –≤–∏–¥–µ–Ω –≤ –∫–æ–Ω—Ü–µ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
// ‚ùó –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ


// addComment: builder.mutation<Comment, string>({
//   query: (com) => ({
//     url: "comments",
//     method: 'POST',
//     body: {
//       postId: 1,
//       name: "Test User",
//       email: "test@example.com",
//       body: com
//     }
//   })
// })  ----



/*import { createRoot } from "react-dom/client"

export const App = () => {
  return (
    <div>
      <h2>–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è master –æ—Ç origin master ?</h2>
      <ul>
        <li>1 - –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ 2 –≤–µ—Ç–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏. –ò—Ö –Ω–∏—á–µ–≥–æ –Ω–µ —Å–≤—è–∑—ã–≤–∞–µ—Ç</li>
        <li>2 - master –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é, origin master - —É–¥–∞–ª–µ–Ω–Ω–æ–º—É</li>
        <li>3 - –≠—Ç–æ 2 –Ω–∞–∑–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –≤–µ—Ç–∫–∏. –ü—Ä–∏—Å—Ç–∞–≤–∫–∞ origin –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–º—ã—Å–ª–∞.</li>
        <li>4 - –í–µ—Ç–∫–∏ origin master –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</li>
        <li>5 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
      </ul>
    </div>
  )
}

createRoot(document.getElementById("root")!).render(<App />)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è master –æ—Ç origin master ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1

// 2 +


/*import { configureStore } from "@reduxjs/toolkit";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { createRoot } from "react-dom/client";
import { Provider } from "react-redux";

type Photo = {
  albumId: string;
  id: string;
  title: string;
  url: string;
};

// Api
const api = createApi({
  reducerPath: "api",
  tagTypes: ['Photo'],
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => {
    return {
      getPhotos: builder.query<Photo[], void>({
        query: () => "photos",
        providesTags: ['Photo']
      }),
      updatePhoto: builder.mutation<Photo, { id: string; title: string }>({
        query: ({ id, title }) => {
          return {
            method: "PUT",
            url: `photos/${id}`,
            body: { title },
          };
        },
        invalidatesTags: ['Photo']
      }),
    };
  },
});

const { useGetPhotosQuery, useUpdatePhotoMutation } = api;

// App.tsx
const App = () => {
  const { data } = useGetPhotosQuery();
  const [trigger] = useUpdatePhotoMutation();

  const updatePhotoTitleHandler = (id: string) => {
    trigger({ id, title: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" });
  };

  return (
    <>
      {data?.map((el) => {
        return (
          <div key={el.id} style={{ margin: "15px" }}>
            <b>title</b> - {el.title}
            <button onClick={() => updatePhotoTitleHandler(el.id)}>Update title</button>
          </div>
        );
      })}
    </>
  );
};

// store.ts
const store = configureStore({
  reducer: { [api.reducerPath]: api.reducer },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
});

createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
);*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Update title –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã title
// –∏–∑–º–µ–Ω–∏—Ç—Å—è, –Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É

// ü™õ –ó–∞–¥–∞—á–∞:
// –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π re-fetching –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–≥–∏. –¢.–µ. —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É Update title, title –æ–±–Ω–æ–≤–∏–ª—Å—è –±–µ–∑ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
// –æ–±–Ω–æ–≤–∏–ª—Å—è –±–µ–∑ —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

// üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–∏—Å–∞—Ç—å 3 —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞
// –í –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// ‚ùó–ó–∞–ø—è—Ç—É—é –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: xxx: {id: 1}, yyy: {id: 2}, zzz: {id: 3} ++++


/*import { configureStore } from "@reduxjs/toolkit"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { createRoot } from "react-dom/client"
import { Provider } from "react-redux"

type Product = {
  id: string
  title: string
  description: string
  price: number
}

export type Response = {
  total: number
  messages: string[]
  page: number
  pageCount: number
  data: Product[]
}

// Api
const productsApi = createApi({
  reducerPath: "productsApi",
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => {
    return {
      getProducts: builder.query<Product[], void>({
        query: () => {
          return {
            method: "GET",
            url: "products",
          }
        },
        transformResponse: (response: Response) => response.data,
        // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
      }),
    }
  },
})

const { useGetProductsQuery } = productsApi

// App.tsx
const App = () => {
  const { data: products } = useGetProductsQuery()

  return (
    <>
      {products?.map((el) => {
        return (
          <div key={el.id} style={{ border: "1px solid", margin: "5px", padding: "5px" }}>
            <p>title - {el.title}</p>
            <p>description - {el.description}</p>
          </div>
        )
      })}
    </>
  )
}

// store.ts
const store = configureStore({
  reducer: {
    [productsApi.reducerPath]: productsApi.reducer,
  },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(productsApi.middleware),
})

createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ë–µ–ª—ã–π —ç–∫—Ä–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤ —á–µ–º –æ—à–∏–±–∫–∞

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ  `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç—ã
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// ‚ùó–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


// transformResponse: (response: Response) => response.data +++



/*import { configureStore } from "@reduxjs/toolkit"
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { createRoot } from "react-dom/client"
import { Provider } from "react-redux"

type Comment = {
  postId: string
  id: string
  name: string
  email: string
  body: string
}

// Api
const api = createApi({
  reducerPath: "commentsApi",
  baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
  endpoints: (builder) => {
    return {
      getComments: builder.query<Comment[], void>({
        query: () => 'comments'
      })
      // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
    }
  },
})

const { useGetCommentsQuery } = api

// App.tsx
const App = () => {
  const { data } = useGetCommentsQuery()

  return (
    <>
      {data?.map((el) => {
        return (
          <div key={el.id} style={{ border: "1px solid", margin: "5px", padding: "5px" }}>
            <p>body - {el.body}</p>
          </div>
        )
      })}
    </>
  )
}

// store.ts
const store = configureStore({
  reducer: {
    [api.reducerPath]: api.reducer,
  },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
})

createRoot(document.getElementById("root")!).render(
  <Provider store={store}>
    <App />
  </Provider>,
)*/

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ë–µ–ª—ã–π —ç–∫—Ä–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤ —á–µ–º –æ—à–∏–±–∫–∞

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ  `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ

// getComments: builder.query<Comment[], void>({
//   query: () => 'comments'
// })