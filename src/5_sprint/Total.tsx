// import { configureStore, createSlice, nanoid } from "@reduxjs/toolkit";
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
// import { createRoot } from "react-dom/client";
// import { Provider, useSelector } from "react-redux";
//
// const notificationsSlice = createSlice({
//   name: "notifications",
//   initialState: {
//     messages: [] as { type: "success" | "error" }[],
//   },
//   reducers: {},
//   extraReducers: (builder) => {
//     // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
//     // builder.addMatcher(
//     //   (action) => action.type.endsWith('/fulfilled'),
//     //   (state) => {
//     //     state.messages.push({ type: 'success' });
//     //   }
//     // ).addMatcher(
//     //   (action) => action.type.endsWith('/rejected'),
//     //   (state) => {
//     //     state.messages.push({ type: 'error' });
//     //   }
//     // );
//   },
//   selectors: {
//     selectMessages: (state) => state.messages,
//   },
// });
//
// export const { selectMessages } = notificationsSlice.selectors;
//
// type Post = {
//   body: string;
//   id: string;
//   title: string;
//   userId: string;
// };
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   tagTypes: ["Post"],
//   endpoints: (builder) => {
//     return {
//       getPosts: builder.query<Post[], void>({
//         query: () => "posts",
//         providesTags: ["Post"],
//       }),
//       updatePost: builder.mutation<Post, { id: string; payload: { title: string; body: string } }>({
//         query: ({ id, payload }) => ({
//           method: "PUT",
//           url: `posts/${id}`,
//           body: payload,
//         }),
//         invalidatesTags: ["Post"],
//       }),
//       removePost: builder.mutation<{ message: string }, string>({
//         query: () => ({
//           method: "DELETE",
//           url: `posts/${nanoid()}`,
//         }),
//         invalidatesTags: ["Post"],
//       }),
//     };
//   },
// });
//
// const { useGetPostsQuery, useUpdatePostMutation, useRemovePostMutation } = api;
//
// // App.tsx
// export const Posts = () => {
//   const { data } = useGetPostsQuery();
//   const [updatePost] = useUpdatePostMutation();
//   const [removePost] = useRemovePostMutation();
//
//   const updatePostHandler = (id: string) => {
//     updatePost({ id, payload: { title: "–¢–µ—Å—Ç–æ–≤—ã–π title", body: "–¢–µ—Å—Ç–æ–≤–æ–µ body —Å–æ–æ–±—â–µ–Ω–∏–µ" } });
//   };
//
//   const deletePostHandler = (id: string) => {
//     removePost(id);
//   };
//
//   return (
//     <div style={{ border: "1px solid", margin: "5px", padding: "5px" }}>
//       <h2>Posts</h2>
//       {data?.map((el) => {
//         return (
//           <div key={el.id} style={{ display: "flex", alignItems: "center" }}>
//             <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
//               <p>
//                 <b>title</b> - {el.title}
//               </p>
//             </div>
//             <button onClick={() => updatePostHandler(el.id)}>Update post</button>
//             <button onClick={() => deletePostHandler(el.id)}>Delete post</button>
//           </div>
//         );
//       })}
//     </div>
//   );
// };
//
// export const Notifications = () => {
//   const messages = useAppSelector(selectMessages);
//
//   return (
//     <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
//       <h2>Notifications</h2>
//       {messages?.map((m) => {
//         return (
//           <div>
//             {m.type === "success" ? (
//               <b style={{ color: "green" }}>Success</b>
//             ) : (
//               <b style={{ color: "red" }}>Error</b>
//             )}
//           </div>
//         );
//       })}
//     </div>
//   );
// };
//
// const App = () => {
//   return (
//     <div style={{ display: "flex", gap: "100px" }}>
//       <Notifications />
//       <Posts />
//     </div>
//   );
// };
//
// // store.ts
// const store = configureStore({
//   reducer: {
//     [notificationsSlice.name]: notificationsSlice.reducer,
//     [api.reducerPath]: api.reducer,
//   },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// });
//
// type RootState = ReturnType<typeof store.getState>;
// const useAppSelector = useSelector.withTypes<RootState>();
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –±–ª–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (Notifications), –∞ —Å–ø—Ä–∞–≤–∞
// –±–ª–æ–∫ —Å –ø–æ—Å—Ç–∞–º–∏ (Posts).
// –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç. –í—ã —É–≤–∏–¥–∏—Ç–µ 2 —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞.
// –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç. –í—ã —É–≤–∏–¥–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ—Å—Ç–∞ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π,
// –∞ –≤—Ç–æ—Ä–æ–π –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ.

// ü™õ –ó–∞–¥–∞—á–∞:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏–º –≤ —Ç–æ–º —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–ø–æ–≤–µ—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–∞–∂–¥—ã–π action.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–∫—à–µ–Ω –∏ –µ—Å–ª–∏
// –æ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Ç–æ –±–ª–æ–∫–µ Notifications –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ Success, –∞ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ Error
// –í—ã–≥–ª—è–¥–µ—Ç—å –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ –≤–æ—Ç —Ç–∞–∫: http://surl.li/slhhwi
// ‚ùó–í—ã–≤–æ–¥–∏—Ç—å —Ç–∏–ø —ç–∫—à–∫–µ–Ω–∞, –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É –∏ –ø—Ä–æ—á–µ–µ –Ω–µ –Ω–∞–¥–æ.

// üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ addMatcher (–¥–ª—è —É—Å–ø–µ—Ö–∞ –∏ –æ—à–∏–±–∫–∏). +++


// import { useEffect } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import axios from "axios"
// import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
// import { z } from "zod"
//
// // Types
// type Product = {
//   id: string
//   title: string
//   description: string
//   price: number
// }
//
// type ProductsResponse = {
//   total: number
//   messages: string[]
//   page: number
//   pageCount: number
//   data: Product[]
// }
//
// // ZOD schemas
// const productSchema = z.object({
//   id: z.string(),
//   title: z.string(),
//   description: z.string(),
//   price: z.number().positive(),
// })
//
// const productsResponseSchema = z.object({
//   total: z.number().int().positive(),
//   messages: z.array(z.string()),
//   page: z.number().int().positive(),
//   pageCount: z.number().int().positive(),
//   data: z.array(productSchema),
// })
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   getProducts() {
//     return instance.get<ProductsResponse>("products")
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "products",
//   initialState: {
//     products: [] as Product[],
//   },
//   selectors: {
//     selectProducts: (state) => state.products,
//   },
//   reducers: (create) => ({
//     fetchProducts: create.asyncThunk(
//       async (_arg, { rejectWithValue }) => {
//         try {
//           const res = await api.getProducts()
//           productsResponseSchema.parse(res.data) // üíé ZOD
//           return { products: res.data.data }
//         } catch (error) {
//           if (error instanceof z.ZodError) {
//             alert("Zod error")
//             console.table(error.issues)
//           }
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           state.products = action.payload.products
//         },
//       },
//     ),
//   }),
// })
//
// const filmsReducer = slice.reducer
// const { fetchProducts } = slice.actions
// const { selectProducts } = slice.selectors
//
// // App
// const App = () => {
//   const dispatch = useAppDispatch()
//   const products = useAppSelector(selectProducts)
//
//   useEffect(() => {
//     dispatch(fetchProducts())
//   }, [])
//
//   return (
//     <>
//       <h2>üõí Products</h2>
//       {products.map((product) => {
//         return (
//           <div key={product.id}>
//             <b>{product.title}</b>
//             <p>{product.description}</p>
//             <p>üíµ {product.price} $</p>
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: filmsReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// ‚ùó–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ zod.
// –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ `pnpm add zod`

// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π (Zod error),
// —Ç.–∫. productsResponseSchema –æ–ø–∏—Å–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–∏–ø–∞ ProductsResponse —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ productsResponseSchema,
// —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ –∏ —Ñ–∏–ª—å–º—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// ‚ùó–ß–∏—Å–ª–∞ (total, page, pageCount) –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ —Ü–µ–ª—ã–µ –∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
// ‚ùó –ú–µ–Ω—è—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å–≤–æ–π—Å—Ç–≤ –≤ —Å—Ö–µ–º–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
// ‚ùó –í—ã–Ω–æ—Å–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–µ –Ω–∞–¥–æ

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ productsResponseSchema —Ü–µ–ª–∏–∫–æ–º

// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
// const productsResponseSchema = z.object({
//   total: z.any(),
//   messages: z.any(),
//   page: z.any(),
//   pageCount: z.string(),
//   data: z.any(),
// }) +++



// import { configureStore } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider } from "react-redux"
// import { useState } from "react"
//
// type Post = {
//   body: string
//   id: string
//   title: string
//   userId: string
// }
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   tagTypes: ["Post"],
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api" }),
//   endpoints: (builder) => ({
//     getPosts: builder.query<Post[], void>({
//       query: () => "posts",
//       providesTags: ["Post"],
//     }),
//     removePost: builder.mutation<{ message: string }, string>({
//       query: (id) => ({
//         method: "DELETE",
//         url: `posts/${id}?delay=3`,
//       }),
//       async onQueryStarted(id, { queryFulfilled, dispatch }) {
//         const patchResult = dispatch(
//           api.util.updateQueryData("getPosts", undefined, (state) => {
//             const index = state.findIndex((post) => post.id === id)
//             if (index !== -1) {
//               state.splice(index, 1)
//             }
//           }),
//         )
//         try {
//           // ‚ùó‚ùó‚ùóXXX ‚ùó‚ùó‚ùó
//           await queryFulfilled
//         } catch (error) {
//           patchResult.undo()
//           // ‚ùó‚ùó‚ùóYYY ‚ùó‚ùó‚ùó
//         }
//       },
//       invalidatesTags: ["Post"],
//     }),
//   }),
// })
//
// const { useGetPostsQuery, useRemovePostMutation } = api
//
// // App.tsx
// const App = () => {
//   const { data } = useGetPostsQuery()
//   const [removePost] = useRemovePostMutation()
//
//   const [loadingId, setLoadingId] = useState<string | null>(null)
//
//   const removePostHandler = (id: string) => {
//     setLoadingId(id)
//     removePost(id).finally(() => {
//       setLoadingId(null)
//     })
//   }
//
//   return (
//     <>
//       {data?.map((el) => {
//         return (
//           <div key={el.id} style={{ display: "flex", alignItems: "center" }}>
//             {loadingId === el.id && <h3>Loading...</h3>}
//             <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
//               <b>title</b> - {el.title}
//             </div>
//             <button onClick={() => removePostHandler(el.id)}>X</button>
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// Optimistic update –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –ø–æ—á—Ç–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.
// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ // ‚ùó‚ùó‚ùóXXX ‚ùó‚ùó‚ùó –∏ // ‚ùó‚ùó‚ùóYYY ‚ùó‚ùó‚ùó
// –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä? +++



// import { createRoot } from "react-dom/client"
//
// export const App = () => {
//   return (
//     <div>
//       <h2>–î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª .gitignore ?</h2>
//       <ul>
//         <li>1 ‚Äî –ß—Ç–æ–±—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å –∏—Ö –æ—Ç GitHub</li>
//         <li>2 ‚Äî –ß—Ç–æ–±—ã Git –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ gitignore</li>
//         <li>3 ‚Äî –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –Ω—ë–º –ø–∞—Ä–æ–ª–µ–π –∏ API-–∫–ª—é—á–µ–π</li>
//         <li>4 ‚Äî –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç</li>
//         <li>
//           5 - –§–∞–π–ª .gitignore –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, —Ç.–∫. –≤—Å–µ —Ñ–∞–π–ª—ã —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ–ª–∂–Ω—ã
//           –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∏–∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –≤ .gitignore –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
//         </li>
//         <li>6 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
//       </ul>
//     </div>
//   )
// }
//
// createRoot(document.getElementById("root")!).render(<App />)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª –≤ .gitignore ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 2 +++


// import { configureStore } from "@reduxjs/toolkit";
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
// import { createRoot } from "react-dom/client";
// import { Provider } from "react-redux";
//
// type Post = {
//   body: string;
//   id: string;
//   title: string;
//   userId: string;
// };
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => {
//     return {
//       getPosts: builder.query<Post[], void>({
//         query: () => "posts",
//       }),
//       //‚ùó–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–∞–∫ –∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ updatePost
//       // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
//       updatePost: builder.mutation<Post, { id: string; payload: { title: string; body: string } }>({
//         query: ({ id, payload }) => ({
//           method: "PUT",
//           url: `posts/${id}`,
//           body: payload,
//         }),
//       }),
//     };
//   },
// });
//
// const { useGetPostsQuery, useUpdatePostMutation } = api;
//
// // App.tsx
// const App = () => {
//   const { data } = useGetPostsQuery();
//   const [updatePost] = useUpdatePostMutation();
//
//   const updatePostHandler = (id: string) => {
//     updatePost({ id, payload: { title: "–¢–µ—Å—Ç–æ–≤—ã–π title", body: "–¢–µ—Å—Ç–æ–≤–æ–µ body —Å–æ–æ–±—â–µ–Ω–∏–µ" } });
//   };
//
//   return (
//     <>
//       {data?.map((el) => {
//         return (
//           <div style={{ display: "flex", alignItems: "center" }}>
//             <div
//               key={el.id}
//               style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}
//             >
//               <p>
//                 <b>title</b> - {el.title}
//               </p>
//             </div>
//             <button onClick={() => updatePostHandler(el.id)}>Update post</button>
//           </div>
//         );
//       })}
//     </>
//   );
// };
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// });
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ
// ‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ +++


// import { configureStore } from "@reduxjs/toolkit";
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
// import React from "react";
// import { createRoot } from "react-dom/client";
// import { Provider, useDispatch } from "react-redux";
// import { BrowserRouter, NavLink, Route, Routes } from "react-router";
//
// type Product = {
//   id: string;
//   title: string;
//   description: string;
//   price: number;
// };
//
// type ProductsResponse = {
//   total: number;
//   messages: string[];
//   page: number;
//   pageCount: number;
//   data: Product[];
// };
//
// type Film = {
//   id: number;
//   nameOriginal: string;
//   description: string;
//   ratingImdb: number;
// };
//
// type FilmsResponse = {
//   total: number;
//   messages: string[];
//   page: number;
//   pageCount: number;
//   data: Film[];
// };
//
// type Post = {
//   body: string;
//   id: string;
//   title: string;
//   userId: string;
// };
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   tagTypes: ["Film", "Product", "Post"],
//   endpoints: (builder) => {
//     return {
//       getFilms: builder.query<FilmsResponse, void>({
//         query: () => "films",
//         providesTags: ["Film"],
//       }),
//       getProducts: builder.query<ProductsResponse, void>({
//         query: () => "products",
//         providesTags: ["Product"],
//       }),
//       getPosts: builder.query<Post[], void>({
//         query: () => "posts",
//         providesTags: ["Post"],
//       }),
//     };
//   },
// });
//
// const { useGetFilmsQuery, useGetProductsQuery, useGetPostsQuery } = api;
//
// // Films.tsx
// const Films = () => {
//   const { data } = useGetFilmsQuery();
//
//   return (
//     <>
//       <h1>Films</h1>
//       {data?.data.map((el) => (
//         <div key={el.id} style={{ margin: "15px" }}>
//           movie title - <b>{el.nameOriginal}</b>
//         </div>
//       ))}
//     </>
//   );
// };
//
// const Products = () => {
//   const { data } = useGetProductsQuery();
//
//   return (
//     <>
//       <h1>Products</h1>
//       {data?.data.map((el) => (
//         <div key={el.id} style={{ margin: "15px" }}>
//           title - <b>{el.title}</b>
//         </div>
//       ))}
//     </>
//   );
// };
//
// const Posts = () => {
//   const { data } = useGetPostsQuery();
//
//   const dispatch = useDispatch();
//
//   const clearCacheHandler = () => {
//     // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
//     dispatch(api.util.invalidateTags(['Film','Product']))
//   };
//
//   return (
//     <>
//       <h1>Posts</h1>
//       <button onClick={clearCacheHandler}>I clear cache. Mu-ha-ha üë∫</button>
//       {data?.map((el) => (
//         <div key={el.id} style={{ margin: "15px" }}>
//           title - <b>{el.title}</b>
//         </div>
//       ))}
//     </>
//   );
// };
//
// export const App = () => {
//   return (
//     <>
//       <header style={{ display: "flex", alignItems: "center", gap: "10px", border: "1px solid" }}>
//         <ul>
//           Menu:
//           <li>
//             <NavLink to={"films"}>Films</NavLink>
//           </li>
//           <li>
//             <NavLink to={"products"}>Products</NavLink>
//           </li>
//           <li>
//             <NavLink to={"posts"}>Posts</NavLink>
//           </li>
//         </ul>
//       </header>
//
//       <Routes>
//         <Route path={"/"} element={<h1>Home page</h1>} />
//         <Route path={"/films"} element={<Films />} />
//         <Route path={"/products"} element={<Products />} />
//         <Route path={"/posts"} element={<Posts />} />
//       </Routes>
//     </>
//   );
// };
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// });
//
// createRoot(document.getElementById("root")!).render(
//   <BrowserRouter>
//     <Provider store={store}>
//       <App />
//     </Provider>
//   </BrowserRouter>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∏–ª—å–º—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–æ–≤ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ—Å—Ç—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// –û—Ç–∫—Ä–æ–π redux devtools –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∏–ª—å–º—ã, –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∫–µ—à–µ

// ü™õ –ó–∞–¥–∞—á–∞:
// –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ—Å—Ç–æ–≤ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ `I clear cache. Mu-ha-ha üë∫`. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É
// –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ñ–∏–ª—å–º–æ–≤ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó`, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É +++


// import { createRoot } from "react-dom/client"
// import React, { useState } from "react"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { configureStore } from "@reduxjs/toolkit"
// import { Provider } from "react-redux"
//
// // Styles
// const table: React.CSSProperties = {
//   borderCollapse: "collapse",
//   width: "100%",
//   tableLayout: "fixed",
// }
//
// const th: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
//   background: "lightgray",
//   cursor: "pointer",
// }
//
// const td: React.CSSProperties = {
//   padding: "10px",
//   border: "1px solid black",
// }
//
// // Api
// type User = {
//   id: number
//   name: string
//   age: number
// }
//
// type UserResponse = {
//   totalCount: number
//   items: User[]
// }
//
// type SortDirection = "asc" | "desc" | null
// type SortBy = "name" | "age" | null
//
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => ({
//     getUsers: builder.query<UserResponse, { sortDirection: SortDirection; sortBy: SortBy }>({
//       query: ({ sortDirection, sortBy }) => {
//         return {
//           url: `users`,
//           params: {
//             sortDirection,
//             sortBy,
//           },
//         }
//       },
//     }),
//
//   }),
// })
//
// const { useGetUsersQuery } = api
//
// // App
//
// export const App = () => {
//   const [sortDirection, setSortDirection] = useState<SortDirection>("asc")
//   const [sortBy, setSortBy] = useState<SortBy>("age")
//
//   const { data } = useGetUsersQuery({ sortDirection, sortBy })
//
//   const sortHandler = (name: "name" | "age") => {
//     const direction = sortDirection === "asc" ? "desc" : "asc"
//     setSortDirection(direction)
//     setSortBy(name)
//   }
//
//   return (
//     <>
//       <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
//       <table style={table}>
//         <thead>
//         <tr>
//           <th style={th} onClick={() => sortHandler("name")}>
//             Name
//           </th>
//           <th style={th} onClick={() => sortHandler("age")}>
//             Age
//           </th>
//         </tr>
//         </thead>
//         <tbody>
//         {data?.items.map((user) => (
//           <tr key={user.id}>
//             <td style={td}>{user.name}</td>
//             <td style={td}>{user.age}</td>
//           </tr>
//         ))}
//         </tbody>
//       </table>
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ Name –∏–ª–∏ Age –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ –∫–∞–∫ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ Age –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É,
// –∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ Name –ø–æ –∏–º–µ–Ω–∏
// –û–¥–Ω–∞–∫–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –∫–æ–¥ getUsers –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è.

// –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ getUsers —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞ –≤–µ—Ä–Ω–æ
// ‚ùó–¢–∏–ø–∏–∑–∞—Ü–∏—é —É–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// ‚ùó–û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
// –ü–µ—Ä–≤—ã–º: sortDirection, –≤—Ç–æ—Ä—ã–º sortBy.
// –≠—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –∫–æ–¥–∞,
// –µ—Å–ª–∏ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
// getUsers: builder.query<{ sortDirection: any; sortBy: any >({
//       query: () => {
//         return {
//           url: `users`,
//         }
//       },
//     }), ---


// import { asyncThunkCreator, buildCreateSlice, configureStore } from "@reduxjs/toolkit"
// import axios from "axios"
// import { createRoot } from "react-dom/client"
// import { SubmitHandler, useForm } from "react-hook-form"
// import { Provider, useDispatch, useSelector } from "react-redux"
// import { BrowserRouter, Navigate, Route, Routes, useNavigate } from "react-router"
// import { useEffect } from "react"
//
// // Types
// type Inputs = {
//   email: string
//   password: string
// }
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" })
//
// const api = {
//   login(data: Inputs) {
//     return instance.post("auth/login", data)
//   },
// }
//
// // Slice
// const createAppSlice = buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })
//
// const slice = createAppSlice({
//   name: "auth",
//   initialState: {
//     isLoggedIn: false,
//     isLoading: false,
//   },
//   selectors: {
//     selectIsLoggedIn: (state) => state.isLoggedIn,
//     selectIsLoading: (state) => state.isLoading,
//   },
//   reducers: (create) => ({
//     setLoading: create.reducer<{ isLoading: boolean }>((state, action) => {
//       state.isLoading = action.payload.isLoading
//     }),
//     login: create.asyncThunk(
//       async (arg: Inputs, { dispatch, rejectWithValue }) => {
//         try {
//           dispatch(setLoading({ isLoading: true }))
//           await api.login(arg)
//           return { isLoggedIn: true }
//         } catch (error) {
//           return rejectWithValue(null)
//         }
//       },
//       {
//         fulfilled: (state, action) => {
//           alert("–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ")
//           state.isLoggedIn = action.payload.isLoggedIn
//         },
//         settled: (state) => {
//           state.isLoading = false
//         },
//       },
//     ),
//   }),
// })
//
// const authReducer = slice.reducer
// const { setLoading, login } = slice.actions
// const { selectIsLoading, selectIsLoggedIn } = slice.selectors
//
// // Components
// const Loader = () => {
//   return <h1>Loading ...</h1>
// }
//
// const Profile = () => {
//   return <h2>üòé Profile</h2>
// }
//
// const Login = () => {
//   const dispatch = useAppDispatch()
//   const navigate = useNavigate()
//
//   const isLoading = useAppSelector(selectIsLoading)
//   const isLoggedIn = useAppSelector(selectIsLoggedIn)
//
//   const { register, handleSubmit } = useForm<Inputs>({
//     defaultValues: { email: "darrell@gmail.com", password: "123" },
//   })
//
//   // ‚ùó XXX
//
//   useEffect(() => {
//     if (isLoggedIn) {
//       navigate('/profile')
//     }
//   }, [isLoggedIn, navigate])
//
//   const onSubmit: SubmitHandler<Inputs> = (data) => {
//     dispatch(login(data))
//   }
//
//   return (
//     <>
//       {isLoading && <Loader />}
//       <form onSubmit={handleSubmit(onSubmit)}>
//         <input placeholder={"–í–≤–µ–¥–∏—Ç–µ email"} {...register("email")} />
//         <input type={"password"} placeholder={"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"} {...register("password")} />
//         <button type="submit">–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
//       </form>
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [slice.name]: authReducer,
//   },
// })
//
// type RootState = ReturnType<typeof store.getState>
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <BrowserRouter>
//     <Provider store={store}>
//       <Routes>
//         <Route path={"/"} element={<Login />} />
//         <Route path={"profile"} element={<Profile />} />
//       </Routes>
//     </Provider>
//   </BrowserRouter>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó Email –∏ password –º–µ–Ω—è—Ç—å –Ω–µ –Ω–∞–¥–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
// —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è" –∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ alert —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `‚ùó XXX`, —á—Ç–æ–±—ã
// –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile.
// ‚ùó –í –∫–æ–Ω—Å–æ–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–æ–∫