// import { createRoot } from "react-dom/client"
//
// export const App = () => {
//   return (
//     <div>
//       <h2>–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–µ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ?</h2>
//       <ul>
//         <li>1 - 2 –≤–µ—Ç–∫–∏. master(main) –∏ develop</li>
//         <li>2 - –ß–∏—Å–ª–æ –≤–µ—Ç–æ–∫ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ git config</li>
//         <li>
//           3 - –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å –≤–µ—Ç–∫–∞ master (main), develop –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ü–æ–¥ –∫–∞–∂–¥—É—é —Ñ–∏—á—É
//           —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞. –ü—Ä–∏ —ç—Ç–æ–º –æ—Ç –≤–µ—Ç–∫–∏ —Å —Ñ–∏—á–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ç–∫–∏
//         </li>
//         <li>4 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
//       </ul>
//     </div>
//   )
// }
//
// createRoot(document.getElementById("root")!).render(<App />)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤–µ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1

// 1 2 3 4 --

// import { configureStore } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch } from "react-redux"
// import { BrowserRouter, NavLink, Route, Routes, useNavigate } from "react-router"
//
// type Product = {
//   id: string
//   title: string
//   description: string
//   price: number
// }
//
// type ProductsResponse = {
//   total: number
//   messages: string[]
//   page: number
//   pageCount: number
//   data: Product[]
// }
//
// type Film = {
//   id: number
//   nameOriginal: string
//   description: string
//   ratingImdb: number
// }
//
// type FilmsResponse = {
//   total: number
//   messages: string[]
//   page: number
//   pageCount: number
//   data: Film[]
// }
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => {
//     return {
//       getFilms: builder.query<FilmsResponse, void>({
//         query: () => "films",
//       }),
//       getProducts: builder.query<ProductsResponse, void>({
//         query: () => "products",
//       }),
//     }
//   },
// })
//
// const { useGetFilmsQuery, useGetProductsQuery } = api
//
// // Films.tsx
// const Films = () => {
//   const { data } = useGetFilmsQuery()
//
//   return (
//     <>
//       <h1>Films</h1>
//       {data?.data.map((el) => (
//         <div key={el.id} style={{ margin: "15px" }}>
//           movie title - <b>{el.nameOriginal}</b>
//         </div>
//       ))}
//     </>
//   )
// }
//
// const Products = () => {
//   const { data } = useGetProductsQuery()
//
//   return (
//     <>
//       <h1>Products</h1>
//       {data?.data.map((el) => (
//         <div key={el.id} style={{ margin: "15px" }}>
//           title - <b>{el.title}</b>
//         </div>
//       ))}
//     </>
//   )
// }
//
// export const App = () => {
//   const navigate = useNavigate()
//
//   const dispatch = useDispatch()
//
//   const leaveSiteHandler = () => {
//     navigate("/")
//     dispatch(api.util.resetApiState())
//     // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
//   }
//
//   return (
//     <>
//       <header style={{ display: "flex", alignItems: "center", gap: "10px", border: "1px solid" }}>
//         <ul>
//           Menu:
//           <li>
//             <NavLink to={"films"}>Films</NavLink>
//           </li>
//           <li>
//             <NavLink to={"products"}>Products</NavLink>
//           </li>
//         </ul>
//         <button onClick={leaveSiteHandler}>Leave the site</button>
//       </header>
//
//       <Routes>
//         <Route path={"/"} element={<h1>Home page</h1>} />
//         <Route path={"/films"} element={<Films />} />
//         <Route path={"/products"} element={<Products />} />
//       </Routes>
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <BrowserRouter>
//     <Provider store={store}>
//       <App />
//     </Provider>
//   </BrowserRouter>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∏–ª—å–º—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å
// –û—Ç–∫—Ä–æ–π redux devtools –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∏–ª—å–º—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –∫–µ—à–µ

// ü™õ –ó–∞–¥–∞—á–∞:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `Leave the site` –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—á–∏—Å—Ç—å –≤–µ—Å—å RTK query –∫–µ—à
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó`, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É

// dispatch(api.util.resetApiState()) +++


// import { configureStore, createSlice } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider, useSelector } from "react-redux"
//
// // App slice
// type NotificationLevel = "loading" | "none" | "success" | "error"
//
// const appSlice = createSlice({
//   name: "app",
//   initialState: {
//     notification: "none" as NotificationLevel
//   },
//   reducers: {},
//   extraReducers: (builder) => {
//     // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
//     builder
//       .addMatcher(api.endpoints.getPhotos.matchPending, (state) => {
//         state.notification = "loading"
//       })
//       .addMatcher(api.endpoints.getPhotos.matchFulfilled, (state) => {
//         state.notification = "success"
//       })
//       .addMatcher(api.endpoints.getPhotos.matchRejected, (state) => {
//         state.notification = "error"
//       })
//   },
//   selectors: {
//     selectNotification: (slice) => slice.notification
//   }
// })
//
// const { selectNotification } = appSlice.selectors
//
// // Api
// type Photo = {
//   albumId: string
//   id: string
//   title: string
//   url: string
// }
//
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => ({
//     getPhotos: builder.query<Photo[], void>({
//       query: () => "photos?delay=2"
//     })
//   })
// })
//
// const { useGetPhotosQuery } = api
//
// // App.tsx
// const App = () => {
//   const notification = useAppSelector(selectNotification)
//
//   const { data } = useGetPhotosQuery()
//
//   return (
//     <>
//       {notification === "loading" && <b style={{ fontSize: "36px" }}>üïù–ó–∞–≥—Ä—É–∑–∫–∞...</b>}
//       {notification === "success" && <b style={{ fontSize: "36px" }}>‚úÖ –£—Å–ø–µ—Ö</b>}
//       {notification === "error" && <b style={{ fontSize: "36px" }}>‚ùå –û—à–∏–±–∫–∞</b>}
//       {data?.map((el) => {
//         return (
//           <div key={el.id} style={{ margin: "5px", padding: "5px", width: "200px" }}>
//             <b>title</b> - {el.title}
//             <img src={el.url} alt={`${el.title} image`} />
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: {
//     [appSlice.name]: appSlice.reducer,
//     [api.reducerPath]: api.reducer
//   },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware)
// })
//
// type RootState = ReturnType<typeof store.getState>
// const useAppSelector = useSelector.withTypes<RootState>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω –∏ —Ç–æ–ª—å–∫–æ —Å–ø—É—Å—Ç—è 2 —Å–µ–∫—É–Ω–¥—ã –≤–∏–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó` –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª `üïù–ó–∞–≥—Ä—É–∑–∫–∞...`, –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–∏–¥–µ–ª `‚úÖ –£—Å–ø–µ—Ö`, –∞ –≤ —Å–ª—É—á–∞–µ
// –æ—à–∏–±–∫–∏ `‚ùå –û—à–∏–±–∫–∞`

// üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ addMatcher
// // ‚ùó–ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–π: –∑–∞–≥—Ä—É–∫–∞, —É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∞

// builder
//   .addMatcher(api.endpoints.getPhotos.matchPending, (state) => {
//     state.notification = "loading"
//   })
//   .addMatcher(api.endpoints.getPhotos.matchFulfilled, (state) => {
//     state.notification = "success"
//   })
//   .addMatcher(api.endpoints.getPhotos.matchRejected, (state) => {
//     state.notification = "error"
//   })  +++


// import { createRoot } from "react-dom/client"
//
// export const App = () => {
//   return (
//     <div>
//       <h2>–ö–∞–∫–æ–µ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–æ?</h2>
//       <ol>
//         <li>
//           1 - –ö–æ–º–∞–Ω–¥–∞ git push –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –û–Ω–∞
//           –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ–º–º–∏—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —É–¥–∞–ª–µ–Ω–Ω—ã–π.
//         </li>
//         <li>
//           2 - –ö–æ–º–∞–Ω–¥–∞ git pull –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—è –µ—ë —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
//           —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
//         </li>
//         <li>
//           3 - –ö–æ–º–∞–Ω–¥–∞ git fetch –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã, —Ñ–∞–π–ª—ã –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –≤–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
//           –ò–∑–≤–ª–µ–∫–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã fetch, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –Ω–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ.
//         </li>
//         <li>4 - –ù–∏ –æ–¥–Ω–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–µ –≤–µ—Ä–Ω–æ</li>
//       </ol>
//     </div>
//   )
// }
//
// createRoot(document.getElementById("root")!).render(<App />)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ö–∞–∫–æ–µ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –≤–µ—Ä–Ω–æ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1
// 1 2 3 +++

// import { configureStore, createSlice, isFulfilled, isPending, isRejected } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider, useSelector } from "react-redux"
//
// // Slice
// type RequestStatus = "idle" | "loading" | "succeeded" | "failed"
//
// const appSlice = createSlice({
//   name: "app",
//   initialState: {
//     status: "idle" as RequestStatus,
//   },
//   reducers: {},
//   extraReducers: (builder) => {
//     builder
//       .addMatcher(isPending, (state, action) => {
//         // "‚ùóX"
//         if (action.type.endsWith('/getPosts')) {
//           state.status = "loading"
//         }
//       })
//       .addMatcher(isFulfilled, (state) => {
//         state.status = "succeeded"
//       })
//       .addMatcher(isRejected, (state) => {
//         state.status = "failed"
//       })
//   },
//   selectors: {
//     selectStatus: (state) => state.status,
//   },
// })
//
// const { selectStatus } = appSlice.selectors
//
// type Post = {
//   body: string
//   id: string
//   title: string
//   userId: string
// }
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: async (args, api, extraOptions) => {
//     await new Promise((resolve) => setTimeout(resolve, 2000)) // –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
//
//     return fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" })(args, api, extraOptions)
//   },
//   tagTypes: ["Post"],
//   endpoints: (builder) => {
//     return {
//       getPosts: builder.query<Post[], void>({
//         query: () => "posts",
//         providesTags: ["Post"],
//       }),
//       updatePost: builder.mutation<Post, { id: string; payload: { title: string; body: string } }>({
//         query: ({ id, payload }) => ({
//           method: "PUT",
//           url: `posts/${id}`,
//           body: payload,
//         }),
//         invalidatesTags: ["Post"],
//       }),
//       removePost: builder.mutation<{ message: string }, string>({
//         query: (id) => ({
//           method: "DELETE",
//           url: `posts/${id}`,
//         }),
//         invalidatesTags: ["Post"],
//       }),
//     }
//   },
// })
//
// const { useGetPostsQuery, useUpdatePostMutation, useRemovePostMutation } = api
//
// // Components
// const Header = () => <div style={{ width: "100%", background: "gray", border: "none", height: "50px" }}>header</div>
//
// const LinearProgress = () => (
//   <hr
//     style={{
//       height: "10px",
//       width: "100%",
//       background: "lightblue",
//       border: "none",
//       position: "absolute",
//       left: "0px",
//       top: "50px",
//       right: "0px",
//     }}
//   />
// )
//
// const App = () => {
//   const status = useSelector(selectStatus)
//
//   return (
//     <div>
//       <Header />
//       {status === "loading" && <LinearProgress />}
//       <Posts />
//     </div>
//   )
// }
//
// const Posts = () => {
//   const { data, isSuccess, isLoading } = useGetPostsQuery()
//   const [updatePost] = useUpdatePostMutation()
//   const [removePost] = useRemovePostMutation()
//
//   const updatePostHandler = (id: string) => {
//     updatePost({ id, payload: { title: "–¢–µ—Å—Ç–æ–≤—ã–π title", body: "–¢–µ—Å—Ç–æ–≤–æ–µ body —Å–æ–æ–±—â–µ–Ω–∏–µ" } })
//   }
//
//   const deletePostHandler = (id: string) => {
//     removePost(id)
//   }
//
//   if (isLoading) {
//     return <h2>Posts loading...</h2>
//   }
//
//   return (
//     <div>
//       {isSuccess && (
//         <div>
//           <h2>Posts</h2>
//           {data?.map((el) => {
//             return (
//               <div key={el.id} style={{ display: "flex", alignItems: "center" }}>
//                 <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
//                   <p>
//                     <b>title</b> - {el.title}
//                   </p>
//                 </div>
//                 <button onClick={() => updatePostHandler(el.id)}>Update post</button>
//                 <button onClick={() => deletePostHandler(el.id)}>Delete post</button>
//               </div>
//             )
//           })}
//         </div>
//       )}
//     </div>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [appSlice.name]: appSlice.reducer,
//     [api.reducerPath]: api.reducer,
//   },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞:
// 1. LinearProgress (–≥–æ–ª—É–±–∞—è –ø–æ–ª–æ—Å–∫–∞ –ø–æ–¥ —Ö–µ–¥–µ—Ä–æ–º)
// 2. Posts loading...
// –ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ —Ç–æ–ª—å–∫–æ LinearProgress

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ "‚ùóX" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–ª–∞—Å—å –Ω–∞–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ
// Posts loading..., –∞ LinearProgress –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è. –ù–æ –ø—Ä–∏ —ç—Ç–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
// –ø–æ—Å—Ç–∞ –∫–∞–∫ –∏ –ø—Ä–µ–∂–¥–µ LinearProgress –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å

// if (action.type.endsWith('/getPosts')) {
//   state.status = "loading"
// } -----


// import { configureStore, createSlice } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { useEffect } from "react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch, useSelector } from "react-redux"
//
// // Slice
// const appSlice = createSlice({
//   name: "app",
//   initialState: {
//     error: null as string | null,
//   },
//   reducers: (create) => ({
//     setError: create.reducer<{ error: string | null }>((state, action) => {
//       state.error = action.payload.error
//     }),
//   }),
//   selectors: {
//     selectError: (state) => state.error,
//   },
// })
//
// const { selectError } = appSlice.selectors
// const { setError } = appSlice.actions
//
// // Api
// type Post = {
//   body: string
//   id: string
//   title: string
//   userId: string
// }
//
// type Error = {
//   errors: { field: string; message: string }[]
// }
//
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: async (args, api, extraOptions) => {
//     const result = await fetchBaseQuery({
//       baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/",
//     })(args, api, extraOptions)
//
//     if (result.error) {
//       if (result.error.status === 400) {
//         const error = (result.error.data as Error).errors[0].message
//         api.dispatch(setError({ error }))
//       }
//     }
//     return result
//   },
//   tagTypes: ["Post"],
//   endpoints: (builder) => ({
//     getPosts: builder.query<Post[], void>({
//       query: () => "posts",
//       providesTags: ["Post"],
//     }),
//     removePost: builder.mutation<{ message: string }, string>({
//       query: (id) => ({
//         method: "DELETE",
//         url: `posts/${id}?delay=20`,
//       }),
//       invalidatesTags: ["Post"],
//     }),
//   }),
// })
//
// const { useGetPostsQuery, useRemovePostMutation } = api
//
// // UI
// const Header = () => <div style={{ width: "100%", background: "gray", border: "none", height: "50px" }}>header</div>
//
// const LinearProgress = () => (
//   <hr
//     style={{
//       height: "10px",
//       width: "100%",
//       background: "lightblue",
//       border: "none",
//       position: "absolute",
//       left: "0px",
//       top: "50px",
//       right: "0px",
//     }}
//   />
// )
//
// const App = () => {
//   const error = useSelector(selectError)
//
//   const dispatch = useDispatch()
//
//   useEffect(() => {
//     setTimeout(() => {
//       dispatch(setError({ error: null }))
//     }, 4000)
//   }, [error])
//
//   return (
//     <>
//       <Header />
//       {error && <h1 style={{ color: "red" }}>{error}</h1>}
//       <Posts />
//     </>
//   )
// }
//
// const Posts = () => {
//   const { data, isSuccess, isLoading: isPostsLoading } = useGetPostsQuery()
//   const [removePost, { isLoading: isRemovePostLoading }] = useRemovePostMutation()
//
//   const deletePostHandler = (id: string) => {
//     removePost(id)
//   }
//
//   if (isPostsLoading || isRemovePostLoading) {
//     return <LinearProgress />
//   }
//
//   return (
//     <>
//       {isSuccess && (
//         <>
//           <h2>Posts</h2>
//           {data?.map((el) => {
//             return (
//               <div key={el.id} style={{ display: "flex", alignItems: "center" }}>
//                 <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
//                   <p>
//                     <b>title</b> - {el.title}
//                   </p>
//                 </div>
//                 <button onClick={() => deletePostHandler(el.id)}>Delete post</button>
//               </div>
//             )
//           })}
//         </>
//       )}
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [appSlice.name]: appSlice.reducer,
//     [api.reducerPath]: api.reducer,
//   },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞. –ü–æ—Å—Ç –Ω–µ —É–¥–∞–ª–∏—Ç—Å—è.

// ü™õ –ó–∞–¥–∞—á–∞:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –ø–æ—á–µ–º—É –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –∏ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
// –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —ç–∫—Ä–∞–Ω.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ "‚ùóX" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –æ–Ω —É–≤–∏–¥–µ–ª –æ—à–∏–±–∫—É
// ‚ùó –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ type assertion —Å —Ç–∏–ø–æ–º Error

  // (result.error.data as Error).errors[0].message  +++


// import { configureStore } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider } from "react-redux"
//
// // Types
// type Todolist = {
//   id: string
//   title: string
//   order: number
//   createdAt: string
//   updatedAt: string
//   completed: boolean
// }
//
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: async (args, api, extraOptions) => {
//     await new Promise((resolve) => setTimeout(resolve, 1000)) // –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
//
//     return fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" })(args, api, extraOptions)
//   },
//   endpoints: (builder) => {
//     const url = Math.random() < 0.5 ? "todos" : "todosüë∫"
//     return {
//       todolists: builder.query<Todolist[], void>({
//         query: () => url,
//       }),
//     }
//   },
// })
//
// const { useTodolistsQuery } = api
//
// // Component
// const App = () => {
//   // ‚ùó–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω–æ
//   const data = useTodolistsQuery()
//
//   return (
//     <>
//       {
//         <>
//           {data.data?.map((t) => {
//             return (
//               <div style={t.completed ? { color: "grey" } : {}} key={t.id}>
//                 <input type="checkbox" checked={t.completed} />
//                 <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//               </div>
//             )
//           })}
//         </>
//       }
//       {data.isLoading && <h2>–ó–∞–≥—Ä—É–∑–∫–∞...</h2>}
//       {data.isSuccess && <h2>üë©‚Äçüíª –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: BHOlh#</h2>}
//       {data.isError && <h2> Error: üë∫üë∫üë∫</h2>}
//     </>
//   )
// }
//
// // Store
// const store = configureStore({
//   reducer: {
//     [api.reducerPath]: api.reducer,
//   },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –¢—É–¥—É–ª–∏—Å—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤ 50% –ø–æ–¥–≥—Ä—É–∂–∞—é—Å—è —É—Å–ø–µ—à–Ω–æ –∏–ª–∏ –ø–∞–¥–∞—é—Ç —Å –æ—à–∏–±–∫–æ–π.
// –ù–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –º—ã –≤–∏–¥–∏–º: –ó–∞–≥—Ä—É–∑–∫—É, —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ "‚ùóX","‚ùóY" –∏ "‚ùóZ" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã:
// 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
// 2. –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
// 3. –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

// ‚ùó –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: one two three +++


// import { configureStore, nanoid } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider } from "react-redux"
//
// type Post = {
//   body: string
//   id: string
//   title: string
//   userId: string
// }
//
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   tagTypes: ["Post"],
//   endpoints: (builder) => {
//     return {
//       getPosts: builder.query<Post[], void>({
//         query: () => "posts",
//         providesTags: ["Post"],
//       }),
//       removePost: builder.mutation<{ message: string }, string>({
//         query: (id) => ({
//           method: "DELETE",
//           url: `posts/${id}`,
//         }),
//         invalidatesTags: ["Post"],
//       }),
//     }
//   },
// })
//
// const { useGetPostsQuery, useRemovePostMutation } = api
//
// // App.tsx
// const App = () => {
//   const { data: posts } = useGetPostsQuery()
//   const [removePost] = useRemovePostMutation()
//
//   const removePostHandler = (id: string) => {
//     removePost(nanoid())
//       .unwrap()
//       .then(() => {
//         alert(`‚úÖ The post was successfully deleted`)
//       })
//       .catch((err) => {
//         alert(`‚ùå The post was not deleted: ${err.data.errors}`)
//       })
//   }
//
//   return (
//     <>
//       {posts?.map((el) => {
//         return (
//           <div key={el.id} style={{ display: "flex", alignItems: "center" }}>
//             <div style={{ border: "1px solid", margin: "5px", padding: "5px", width: "200px" }}>
//               <p>
//                 <b>title</b> - {el.title}
//               </p>
//             </div>
//             <button onClick={() => removePostHandler(el.id)}>x</button>
//           </div>
//         )
//       })}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <App />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (—Ö), –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç–æ–º, —á—Ç–æ –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ
// —É–¥–∞–ª–µ–Ω.
// –ù–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø–∞–¥–∞–µ—Ç –æ—à–∏–±–∫–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ network.
// –ó–∞–ø—Ä–æ—Å –ø–∞–¥–∞–µ—Ç —Å 400 –æ—à–∏–±–∫–æ–π

// ü™õ –ó–∞–¥–∞—á–∞:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–¥–µ, —á—Ç–æ–±—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª catch –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª
// —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–¥
// ‚ùó–ß–∏–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω—É–∂–Ω–æ

  // .unwrap() +++


// import { configureStore } from "@reduxjs/toolkit"
// import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
// import { createRoot } from "react-dom/client"
// import { Provider, useDispatch } from "react-redux"
//
// type User = {
//   id: string
//   name: string
//   age: number
// }
//
// type UsersResponse = {
//   items: User[]
//   totalCount: number
// }
//
// // Api
// const api = createApi({
//   reducerPath: "api",
//   baseQuery: fetchBaseQuery({ baseUrl: "https://exams-frontend.kimitsu.it-incubator.io/api/" }),
//   endpoints: (builder) => {
//     return {
//       getUsers: builder.query<UsersResponse, void>({
//         query: () => "users",
//       }),
//     }
//   },
// })
//
// const { useGetUsersQuery } = api
//
// // Users.tsx
// const Users = () => {
//   const { data } = useGetUsersQuery()
//
//   const dispatch = useAppDispatch()
//
//   const addSmileHandler = (id: string) => {
//     const smile = "üòÅ"
//     // ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó
//     dispatch(api.util.updateQueryData('getUsers', undefined, (state) => {
//       const findUser = state.items.find(u => u.id === id)
//       if(findUser) {
//         findUser.name += smile
//       }
//     }))
//   }
//
//   return (
//     <>
//       <h1>Users</h1>
//       {data?.items.map((el) => (
//         <div key={el.id}>
//           name - <b>{el.name}</b>
//           <button onClick={() => addSmileHandler(el.id)}>Add smile</button>
//         </div>
//       ))}
//     </>
//   )
// }
//
// // store.ts
// const store = configureStore({
//   reducer: { [api.reducerPath]: api.reducer },
//   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(api.middleware),
// })
//
// type AppDispatch = typeof store.dispatch
// const useAppDispatch = useDispatch.withTypes<AppDispatch>()
//
// createRoot(document.getElementById("root")!).render(
//   <Provider store={store}>
//     <Users />
//   </Provider>,
// )

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –û—Ç–∫—Ä–æ–π—Ç–µ redux devtools –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–µ—à–µ
// http://surl.li/veofpd
// ü™õ –ó–∞–¥–∞—á–∞:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É `Add smile` –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
// smile
// –†–µ–∑—É–ª—å—Ç–∞—Ç: http://surl.li/kgmhtn
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ `// ‚ùó‚ùó‚ùóXXX‚ùó‚ùó‚ùó`, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
// ‚ùó–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –º—É—Ç–∞–±–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
// ‚ùóupdateRecipe –∫–æ–ª–ª–±–µ–∫ –≤ –∫–∞—á–µ—Ç—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç–µ–π—Ç. –ù–∞–∑–æ–≤–∏—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é state

// dispatch(api.util.updateQueryData('getUsers', undefined, (state) => {
//   const findUser = state.items.find(u => u.id === id)
//   if(findUser) {
//     findUser.name += smile
//   }
// })) +++